;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;int globalTimer = 0;    // Global timer with period of 8 ms
;int second = 0;         // Seconds passed
;
;int currentFloor = 0;   // The current floor
;int target = 0;         // This is the target floor
;bit locked = 0;         // The Elevator is now locked
;bit firstIter = 1;      // First Iter is for reseting the timer and servo position
;bit DCMotors = 0;       // Controlling the DC motors
;bit shouldMove = 0;     // This bit is for making sure we are capturing the inputs
;bit doorOpen = 1;       // Checking door
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0016 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0017     // Place your code here
; 0000 0018     globalTimer++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0019     if(globalTimer%125==0) {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 001A         second++;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001B         globalTimer = 0;
;PCODE: $0000001B VOL: 0
; 0000 001C     }
; 0000 001D }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;// Reset timer and globalTimer and second
;void reset_timer()
; 0000 0021 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0022     TCNT0 = 0x00;       // Set the counter to zero
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0023     globalTimer = 0;    // 8ms counter is reset
;PCODE: $00000024 VOL: 0
; 0000 0024     second = 0;         // Resetting the second
;PCODE: $00000025 VOL: 0
; 0000 0025     lcd_clear();
;PCODE: $00000026 VOL: 0
; 0000 0026 }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;// For controlling the DC Motors
;void DC_motor(int position)
; 0000 002A {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002B     // The PWM is in range of 0 to 19999!
; 0000 002C     OCR1B = (position) * 10 * 20;
;PCODE: $0000002B VOL: 0
;	position -> Y+0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002D }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;// Given a degree, the servo with move to the desired degree/step.
;// For example 0 will result in 0 degrees and 90 is result in 90 degrees
;void servo_position(int position)
; 0000 0032 {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0033     // Servo has to move in range of 0 to 90 degrees thus according to datasheet,
; 0000 0034     // a pulse with a width of 1.5ms will result in 0 degree while a pulse with a
; 0000 0035     // width of 2 ms will result in 90 degrees!
; 0000 0036     OCR1A = 1499 + position * 50/9;
;PCODE: $00000037 VOL: 0
;	position -> Y+0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0037 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;
;// Processing the input from buttons
;void process_input()
; 0000 003B {
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003C 
; 0000 003D     // First of all we have to check whether we are in locked mode or not
; 0000 003E     if(!locked && !shouldMove) {
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 003F         int tempTarget = 255-PINB; // PINB is the input/target
; 0000 0040 
; 0000 0041         switch(tempTarget)
;PCODE: $0000004F VOL: 0
;	tempTarget -> Y+0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0042         {
; 0000 0043             case 1:
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0044                 target = 0;
;PCODE: $00000059 VOL: 0
; 0000 0045                 break;
;PCODE: $0000005A VOL: 0
; 0000 0046             case 2:
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0047                 target = 1;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0048                 break;
;PCODE: $00000060 VOL: 0
; 0000 0049             case 4:
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004A                 target = 2;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 004B                 break;
;PCODE: $00000066 VOL: 0
; 0000 004C             case 8:
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 004D                 target = 3;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 004E                 break;
;PCODE: $0000006C VOL: 0
; 0000 004F             case 16:
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0050                 target = 4;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0051                 break;
;PCODE: $00000072 VOL: 0
; 0000 0052         }
;PCODE: $00000073 VOL: 0
; 0000 0053 
; 0000 0054         if(target!=currentFloor) shouldMove = 1;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0055     }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0056 }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;
;// Processing the floor to be displayed in LCD and furthur processings
;void process_floors()
; 0000 005A {
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 005B     if(target>currentFloor) currentFloor++;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 005C     else currentFloor--;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 005D }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;
;// Moving the servo motors
;void process_servo_motors()
; 0000 0061 {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0062     if(doorOpen)    servo_position(0);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0063     else    servo_position(90);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0064 }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;
;// Moving the DC motors as well as controlling the speed
;void process_dc_motors()
; 0000 0068 {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0069     // Difference of floors
; 0000 006A     int difference = target - difference;
; 0000 006B     // If negative, negate it
; 0000 006C     if(difference < 0) difference*=-1;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;	difference -> R16,R17
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 006D 
; 0000 006E     // If DC motors should be moving start moving them
; 0000 006F     if(DCMotors){
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0070         // If we are in the first second, accelerate and if we are in the middle of the transportation
; 0000 0071         // constant speed. Otherwise, decelerate
; 0000 0072 
; 0000 0073         if(second <= 1)
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0074             DC_motor(80 * globalTimer * 10);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0075         else if(second == 4 && difference == 1) DC_motor(80 * (125-globalTimer) * 10);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0076         else DC_motor(80*125*10);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0077     }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0078 }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;
;// Writing to LCD
;void LCD_controller(int level)
; 0000 007C {
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 007D     char currFloor[16] = "";                    // What we are going to display
; 0000 007E     char myMan[16] = "";
; 0000 007F 
; 0000 0080     sprintf(currFloor,"F: %d, %d, %d",level, globalTimer, second);       // Making the text ready for display
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;	level -> Y+32
;	currFloor -> Y+16
;	myMan -> Y+0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0081     lcd_gotoxy(0,0);                            //lcd_gotoxy ham k cursor ro b xy mibarad
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0082     lcd_puts(currFloor);                        // chap bar roye lcd
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0083 
; 0000 0084     sprintf(myMan,"CF: %d,T: %d",currentFloor, target);    // Making the text ready for display
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0085     lcd_gotoxy(0,1);                            //lcd_gotoxy ham k cursor ro b xy mibarad
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0086     lcd_puts(myMan);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0087 }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;
;// Well this is obvious
;void main(void)
; 0000 008B {
;PCODE: $00000110 VOL: 0
; 0000 008C     // Declare your local variables here
; 0000 008D     DDRA = 0xFF;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 008E     DDRB = 0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 008F     DDRD = 0xFF;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0090     PORTB = 0xFF;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0091 
; 0000 0092     // Timer/Counter 0 initialization
; 0000 0093 // Clock source: System Clock
; 0000 0094 // Clock value: 31.250 kHz
; 0000 0095 // Mode: CTC top=OCR0
; 0000 0096 // OC0 output: Disconnected
; 0000 0097 // Timer Period: 8 ms
; 0000 0098 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0099 TCNT0=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 009A OCR0=0xF9;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 009B 
; 0000 009C     // Configure Timer1
; 0000 009D     TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);     //NON Inverted PWM
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 009E     TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11);        //PRESCALER=8 MODE 14(FAST PWM)
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 009F 
; 0000 00A0     // ICR = 19,999 so fPWM = 8,000,000/ (19,999+1) / 8 = 50Hz
; 0000 00A1     ICR1H=0x4E;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00A2     ICR1L=0x1F;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00A3 
; 0000 00A4 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A5 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00A6 
; 0000 00A7 
; 0000 00A8     lcd_init(16);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00A9 
; 0000 00AA     // Start the servo at rest
; 0000 00AB     /*
; 0000 00AC     servo_position(0);
; 0000 00AD     DC_motor(0);
; 0000 00AE     */
; 0000 00AF 
; 0000 00B0     // Global enable interrupts
; 0000 00B1     #asm("sei")
;PCODE: $0000012D VOL: 0
	sei
;PCODE: $0000012E VOL: 0
; 0000 00B2 
; 0000 00B3     while (1) {
;PCODE: $0000012F VOL: 0
; 0000 00B4         /*
; 0000 00B5         // Place your code here
; 0000 00B6         process_input();
; 0000 00B7         LCD_controller(currentFloor);
; 0000 00B8         process_dc_motors();
; 0000 00B9         process_servo_motors();
; 0000 00BA 
; 0000 00BB         if(target==currentFloor){}
; 0000 00BC         else {
; 0000 00BD             // Checking for first iteration to avoid malfunction
; 0000 00BE             if(firstIter) {
; 0000 00BF                 doorOpen = 0;
; 0000 00C0                 reset_timer();
; 0000 00C1                 firstIter = 0;
; 0000 00C2             }
; 0000 00C3         }
; 0000 00C4         */
; 0000 00C5         LCD_controller(currentFloor);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00C6 
; 0000 00C7         if(second%2){
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00C8             servo_position(90);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00C9             DC_motor(90);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00CA         }
; 0000 00CB         else {
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00CC             servo_position(0);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00CD             DC_motor(0);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00CE         }
;PCODE: $00000145 VOL: 0
; 0000 00CF 
; 0000 00D0     }
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00D1 }
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
