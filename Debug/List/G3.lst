
AVRASM ver. 2.1.30  C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm Sat Jan 16 18:55:02 2021

C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _globalTimer=R4
                 	.DEF _globalTimer_msb=R5
                 	.DEF _second=R6
                 	.DEF _second_msb=R7
                 	.DEF _currentFloor=R8
                 	.DEF _currentFloor_msb=R9
                 	.DEF _target=R10
                 	.DEF _target_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0079 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x4:
000037 6948
000038 0021
000039 0000
00003a 0000      	.DB  0x48,0x69,0x21,0x0,0x0,0x0,0x0,0x0
00003b 0000
00003c 0000
00003d 0000
00003e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
00003f 6c46
000040 6f6f
000041 3a72
000042 2520      	.DB  0x46,0x6C,0x6F,0x6F,0x72,0x3A,0x20,0x25
000043 0064      	.DB  0x64,0x0
                 _0x2020003:
000044 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000045 0008      	.DW  0x08
000046 0004      	.DW  0x04
000047 0066      	.DW  __REG_VARS*2
                 
000048 0002      	.DW  0x02
000049 0260      	.DW  __base_y_G101
00004a 0088      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00004b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004c 94f8      	CLI
00004d 27ee      	CLR  R30
00004e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004f e0f1      	LDI  R31,1
000050 bffb      	OUT  GICR,R31
000051 bfeb      	OUT  GICR,R30
000052 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000053 e08d      	LDI  R24,(14-2)+1
000054 e0a2      	LDI  R26,2
000055 27bb      	CLR  R27
                 __CLEAR_REG:
000056 93ed      	ST   X+,R30
000057 958a      	DEC  R24
000058 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000059 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005c 93ed      	ST   X+,R30
00005d 9701      	SBIW R24,1
00005e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005f e8ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000060 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000061 9185      	LPM  R24,Z+
000062 9195      	LPM  R25,Z+
000063 9700      	SBIW R24,0
000064 f061      	BREQ __GLOBAL_INI_END
000065 91a5      	LPM  R26,Z+
000066 91b5      	LPM  R27,Z+
000067 9005      	LPM  R0,Z+
000068 9015      	LPM  R1,Z+
000069 01bf      	MOVW R22,R30
00006a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006b 9005      	LPM  R0,Z+
00006c 920d      	ST   X+,R0
00006d 9701      	SBIW R24,1
00006e f7e1      	BRNE __GLOBAL_INI_LOOP
00006f 01fb      	MOVW R30,R22
000070 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000071 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000072 bfed      	OUT  SPL,R30
000073 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000074 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000075 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000076 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000077 940c 00e0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;// Declare your global variables here
                 ;int globalTimer = 0;
                 ;int second = 0;
                 ;
                 ;int currentFloor = 0;
                 ;int target = 0;
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0011 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000079 93ea      	ST   -Y,R30
00007a 93fa      	ST   -Y,R31
00007b b7ef      	IN   R30,SREG
00007c 93ea      	ST   -Y,R30
                 ; 0000 0012     // Reinitialize Timer 0 value
                 ; 0000 0013     TCNT0=0x06;
00007d e0e6      	LDI  R30,LOW(6)
00007e bfe2      	OUT  0x32,R30
                 ; 0000 0014     // Place your code here
                 ; 0000 0015     globalTimer++;
00007f 01f2      	MOVW R30,R4
000080 9631      	ADIW R30,1
000081 012f      	MOVW R4,R30
                 ; 0000 0016     if(globalTimer==125) second++;
000082 e7ed      	LDI  R30,LOW(125)
000083 e0f0      	LDI  R31,HIGH(125)
000084 15e4      	CP   R30,R4
000085 05f5      	CPC  R31,R5
000086 f419      	BRNE _0x3
000087 01f3      	MOVW R30,R6
000088 9631      	ADIW R30,1
000089 013f      	MOVW R6,R30
                 ; 0000 0017 }
                 _0x3:
00008a 91e9      	LD   R30,Y+
00008b bfef      	OUT  SREG,R30
00008c 91f9      	LD   R31,Y+
00008d 91e9      	LD   R30,Y+
00008e 9518      	RETI
                 ; .FEND
                 ;
                 ;// Reseting the main timer to avoid confusion
                 ;void reset_timer()
                 ; 0000 001B {
                 ; 0000 001C     TCNT0 = 0x06; //Set the counter to zero
                 ; 0000 001D     globalTimer = 0;
                 ; 0000 001E }
                 ;
                 ;// Writing to LCD
                 ;void LCD_controller(int level)
                 ; 0000 0022 {
                 _LCD_controller:
                 ; .FSTART _LCD_controller
                 ; 0000 0023     char currFloor[16] = "Hi!";
                 ; 0000 0024     sprintf(currFloor,"Floor: %d",level);
00008f 93ba      	ST   -Y,R27
000090 93aa      	ST   -Y,R26
000091 9760      	SBIW R28,16
000092 e180      	LDI  R24,16
000093 e0a0      	LDI  R26,LOW(0)
000094 e0b0      	LDI  R27,HIGH(0)
000095 e6ee      	LDI  R30,LOW(_0x4*2)
000096 e0f0      	LDI  R31,HIGH(_0x4*2)
000097 940e 03bb 	CALL __INITLOCB
                 ;	level -> Y+16
                 ;	currFloor -> Y+0
000099 01fe      	MOVW R30,R28
00009a 93fa      	ST   -Y,R31
00009b 93ea      	ST   -Y,R30
                +
00009c e7ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00009d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00009e 93fa      	ST   -Y,R31
00009f 93ea      	ST   -Y,R30
0000a0 89ec      	LDD  R30,Y+20
0000a1 89fd      	LDD  R31,Y+20+1
0000a2 940e 039b 	CALL __CWD1
0000a4 940e 03a8 	CALL __PUTPARD1
0000a6 e084      	LDI  R24,4
0000a7 940e 0272 	CALL _sprintf
0000a9 9628      	ADIW R28,8
                 ; 0000 0025     lcd_gotoxy(0,0); //lcd_gotoxy ham k cursor ro b xy mibarad
0000aa e0e0      	LDI  R30,LOW(0)
0000ab 93ea      	ST   -Y,R30
0000ac e0a0      	LDI  R26,LOW(0)
0000ad 940e 02c6 	CALL _lcd_gotoxy
                 ; 0000 0026     lcd_puts(currFloor); // chap bar roye lcd
0000af 01de      	MOVW R26,R28
0000b0 940e 02f6 	CALL _lcd_puts
                 ; 0000 0027 }
0000b2 9662      	ADIW R28,18
0000b3 9508      	RET
                 ; .FEND
                 ;
                 ;// For controlling the DC Motors
                 ;void DC_motor(int position)
                 ; 0000 002B {
                 ; 0000 002C     // The PWM is in range of 0 to 19999!
                 ; 0000 002D     OCR1B = 1499 + position * 50/9;
                 ;	position -> Y+0
                 ; 0000 002E }
                 ;
                 ;// Given a degree, the servo with move to the desired degree/step.
                 ;// For example 0 with result in 0 degrees and 90 is result in 90 degrees
                 ;void servo_position(int position)
                 ; 0000 0033 {
                 ; 0000 0034     OCR1A = 1499 + position * 50/9;
                 ;	position -> Y+0
                 ; 0000 0035 }
                 ;
                 ;void process_input()
                 ; 0000 0038 {
                 _process_input:
                 ; .FSTART _process_input
                 ; 0000 0039     target = 255-PINB;
0000b4 b3e6      	IN   R30,0x16
0000b5 e0f0      	LDI  R31,0
0000b6 efaf      	LDI  R26,LOW(255)
0000b7 e0b0      	LDI  R27,HIGH(255)
0000b8 1bae      	SUB  R26,R30
0000b9 0bbf      	SBC  R27,R31
0000ba 015d      	MOVW R10,R26
                 ; 0000 003A     switch(target)
0000bb 01f5      	MOVW R30,R10
                 ; 0000 003B     {
                 ; 0000 003C         case 1:
0000bc 30e1      	CPI  R30,LOW(0x1)
0000bd e0a0      	LDI  R26,HIGH(0x1)
0000be 07fa      	CPC  R31,R26
0000bf f419      	BRNE _0x8
                 ; 0000 003D             target = 0;
0000c0 24aa      	CLR  R10
0000c1 24bb      	CLR  R11
                 ; 0000 003E             break;
0000c2 c01c      	RJMP _0x7
                 ; 0000 003F         case 2:
                 _0x8:
0000c3 30e2      	CPI  R30,LOW(0x2)
0000c4 e0a0      	LDI  R26,HIGH(0x2)
0000c5 07fa      	CPC  R31,R26
0000c6 f419      	BRNE _0x9
                 ; 0000 0040             target = 1;
0000c7 e0e1      	LDI  R30,LOW(1)
0000c8 e0f0      	LDI  R31,HIGH(1)
0000c9 c014      	RJMP _0x11
                 ; 0000 0041             break;
                 ; 0000 0042         case 4:
                 _0x9:
0000ca 30e4      	CPI  R30,LOW(0x4)
0000cb e0a0      	LDI  R26,HIGH(0x4)
0000cc 07fa      	CPC  R31,R26
0000cd f419      	BRNE _0xA
                 ; 0000 0043             target = 2;
0000ce e0e2      	LDI  R30,LOW(2)
0000cf e0f0      	LDI  R31,HIGH(2)
0000d0 c00d      	RJMP _0x11
                 ; 0000 0044             break;
                 ; 0000 0045         case 8:
                 _0xA:
0000d1 30e8      	CPI  R30,LOW(0x8)
0000d2 e0a0      	LDI  R26,HIGH(0x8)
0000d3 07fa      	CPC  R31,R26
0000d4 f419      	BRNE _0xB
                 ; 0000 0046             target = 3;
0000d5 e0e3      	LDI  R30,LOW(3)
0000d6 e0f0      	LDI  R31,HIGH(3)
0000d7 c006      	RJMP _0x11
                 ; 0000 0047             break;
                 ; 0000 0048         case 16:
                 _0xB:
0000d8 31e0      	CPI  R30,LOW(0x10)
0000d9 e0a0      	LDI  R26,HIGH(0x10)
0000da 07fa      	CPC  R31,R26
0000db f419      	BRNE _0x7
                 ; 0000 0049             target = 4;
0000dc e0e4      	LDI  R30,LOW(4)
0000dd e0f0      	LDI  R31,HIGH(4)
                 _0x11:
0000de 015f      	MOVW R10,R30
                 ; 0000 004A             break;
                 ; 0000 004B     }
                 _0x7:
                 ; 0000 004C 
                 ; 0000 004D     /*if(target==currentFloor){}
                 ; 0000 004E     else {
                 ; 0000 004F         reset_timer();
                 ; 0000 0050     }*/
                 ; 0000 0051 }
0000df 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0054 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0055 // Declare your local variables here
                 ; 0000 0056 
                 ; 0000 0057 // PORTB is input port
                 ; 0000 0058 DDRB=0x00;
0000e0 e0e0      	LDI  R30,LOW(0)
0000e1 bbe7      	OUT  0x17,R30
                 ; 0000 0059 PORTB=0xFF;
0000e2 efef      	LDI  R30,LOW(255)
0000e3 bbe8      	OUT  0x18,R30
                 ; 0000 005A 
                 ; 0000 005B DDRD=0xFF;   //PWM Pins as Out
0000e4 bbe1      	OUT  0x11,R30
                 ; 0000 005C 
                 ; 0000 005D // Configure Timer1
                 ; 0000 005E TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
0000e5 b5ef      	IN   R30,0x2F
0000e6 6ae2      	ORI  R30,LOW(0xA2)
0000e7 bdef      	OUT  0x2F,R30
                 ; 0000 005F TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11); //PRESCALER=8 MODE 14(FAST PWM)
0000e8 b5ee      	IN   R30,0x2E
0000e9 61ea      	ORI  R30,LOW(0x1A)
0000ea bdee      	OUT  0x2E,R30
                 ; 0000 0060 
                 ; 0000 0061 ICR1H=0x4E;  //fPWM=50Hz
0000eb e4ee      	LDI  R30,LOW(78)
0000ec bde7      	OUT  0x27,R30
                 ; 0000 0062 ICR1L=0x1F;
0000ed e1ef      	LDI  R30,LOW(31)
0000ee bde6      	OUT  0x26,R30
                 ; 0000 0063 
                 ; 0000 0064 // Configure Timer0
                 ; 0000 0065 // Clock value: 31.250 kHz
                 ; 0000 0066 // Timer Period: 8 ms
                 ; 0000 0067 TCCR0=(1<<CS02);
0000ef e0e4      	LDI  R30,LOW(4)
0000f0 bfe3      	OUT  0x33,R30
                 ; 0000 0068 TCNT0=0x06;
0000f1 e0e6      	LDI  R30,LOW(6)
0000f2 bfe2      	OUT  0x32,R30
                 ; 0000 0069 OCR0=0x00;
0000f3 e0e0      	LDI  R30,LOW(0)
0000f4 bfec      	OUT  0x3C,R30
                 ; 0000 006A 
                 ; 0000 006B // Alphanumeric LCD initialization
                 ; 0000 006C // Characters/line: 16
                 ; 0000 006D lcd_init(16);
0000f5 e1a0      	LDI  R26,LOW(16)
0000f6 940e 0307 	CALL _lcd_init
                 ; 0000 006E 
                 ; 0000 006F 
                 ; 0000 0070 // Global enable interrupts
                 ; 0000 0071 #asm("sei")
0000f8 9478      	sei
                 ; 0000 0072 
                 ; 0000 0073 while (1)
                 _0xD:
                 ; 0000 0074       {
                 ; 0000 0075         // Place your code here
                 ; 0000 0076 
                 ; 0000 0077         process_input();
0000f9 dfba      	RCALL _process_input
                 ; 0000 0078         LCD_controller(target);
0000fa 01d5      	MOVW R26,R10
0000fb df93      	RCALL _LCD_controller
                 ; 0000 0079 
                 ; 0000 007A       }
0000fc cffc      	RJMP _0xD
                 ; 0000 007B }
                 _0x10:
0000fd cfff      	RJMP _0x10
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000fe 93ba      	ST   -Y,R27
0000ff 93aa      	ST   -Y,R26
000100 931a      	ST   -Y,R17
000101 930a      	ST   -Y,R16
000102 81aa      	LDD  R26,Y+2
000103 81bb      	LDD  R27,Y+2+1
000104 9612      	ADIW R26,2
000105 940e 03a0 	CALL __GETW1P
000107 9730      	SBIW R30,0
000108 f159      	BREQ _0x2000010
000109 81aa      	LDD  R26,Y+2
00010a 81bb      	LDD  R27,Y+2+1
00010b 9614      	ADIW R26,4
00010c 940e 03a0 	CALL __GETW1P
00010e 018f      	MOVW R16,R30
00010f 9730      	SBIW R30,0
000110 f061      	BREQ _0x2000012
                +
000111 3002     +CPI R16 , LOW ( 2 )
000112 e0e0     +LDI R30 , HIGH ( 2 )
000113 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000114 f098      	BRLO _0x2000013
000115 01f8      	MOVW R30,R16
000116 9731      	SBIW R30,1
000117 018f      	MOVW R16,R30
                +
000118 81aa     +LDD R26 , Y + 2
000119 81bb     +LDD R27 , Y + 2 + 1
00011a 9614     +ADIW R26 , 4
00011b 93ed     +ST X + , R30
00011c 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00011d 81aa      	LDD  R26,Y+2
00011e 81bb      	LDD  R27,Y+2+1
00011f 9612      	ADIW R26,2
000120 91ed      	LD   R30,X+
000121 91fd      	LD   R31,X+
000122 9631      	ADIW R30,1
000123 93fe      	ST   -X,R31
000124 93ee      	ST   -X,R30
000125 9731      	SBIW R30,1
000126 81ac      	LDD  R26,Y+4
000127 83a0      	STD  Z+0,R26
                 _0x2000013:
000128 81aa      	LDD  R26,Y+2
000129 81bb      	LDD  R27,Y+2+1
00012a 940e 03a0 	CALL __GETW1P
00012c 23ff      	TST  R31
00012d f02a      	BRMI _0x2000014
00012e 91ed      	LD   R30,X+
00012f 91fd      	LD   R31,X+
000130 9631      	ADIW R30,1
000131 93fe      	ST   -X,R31
000132 93ee      	ST   -X,R30
                 _0x2000014:
000133 c006      	RJMP _0x2000015
                 _0x2000010:
000134 81aa      	LDD  R26,Y+2
000135 81bb      	LDD  R27,Y+2+1
000136 efef      	LDI  R30,LOW(65535)
000137 efff      	LDI  R31,HIGH(65535)
000138 93ed      	ST   X+,R30
000139 93fc      	ST   X,R31
                 _0x2000015:
00013a 8119      	LDD  R17,Y+1
00013b 8108      	LDD  R16,Y+0
00013c 9625      	ADIW R28,5
00013d 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00013e 93ba      	ST   -Y,R27
00013f 93aa      	ST   -Y,R26
000140 9726      	SBIW R28,6
000141 940e 03ad 	CALL __SAVELOCR6
000143 e010      	LDI  R17,0
000144 85ac      	LDD  R26,Y+12
000145 85bd      	LDD  R27,Y+12+1
000146 e0e0      	LDI  R30,LOW(0)
000147 e0f0      	LDI  R31,HIGH(0)
000148 93ed      	ST   X+,R30
000149 93fc      	ST   X,R31
                 _0x2000016:
00014a 89ea      	LDD  R30,Y+18
00014b 89fb      	LDD  R31,Y+18+1
00014c 9631      	ADIW R30,1
00014d 8bea      	STD  Y+18,R30
00014e 8bfb      	STD  Y+18+1,R31
00014f 9731      	SBIW R30,1
000150 91e4      	LPM  R30,Z
000151 2f2e      	MOV  R18,R30
000152 30e0      	CPI  R30,0
000153 f409      	BRNE PC+2
000154 c115      	RJMP _0x2000018
000155 2fe1      	MOV  R30,R17
000156 30e0      	CPI  R30,0
000157 f439      	BRNE _0x200001C
000158 3225      	CPI  R18,37
000159 f411      	BRNE _0x200001D
00015a e011      	LDI  R17,LOW(1)
00015b c002      	RJMP _0x200001E
                 _0x200001D:
00015c 940e 034f 	CALL SUBOPT_0x0
                 _0x200001E:
00015e c10a      	RJMP _0x200001B
                 _0x200001C:
00015f 30e1      	CPI  R30,LOW(0x1)
000160 f4a9      	BRNE _0x200001F
000161 3225      	CPI  R18,37
000162 f419      	BRNE _0x2000020
000163 940e 034f 	CALL SUBOPT_0x0
000165 c102      	RJMP _0x20000CC
                 _0x2000020:
000166 e012      	LDI  R17,LOW(2)
000167 e040      	LDI  R20,LOW(0)
000168 e000      	LDI  R16,LOW(0)
000169 322d      	CPI  R18,45
00016a f411      	BRNE _0x2000021
00016b e001      	LDI  R16,LOW(1)
00016c c0fc      	RJMP _0x200001B
                 _0x2000021:
00016d 322b      	CPI  R18,43
00016e f411      	BRNE _0x2000022
00016f e24b      	LDI  R20,LOW(43)
000170 c0f8      	RJMP _0x200001B
                 _0x2000022:
000171 3220      	CPI  R18,32
000172 f411      	BRNE _0x2000023
000173 e240      	LDI  R20,LOW(32)
000174 c0f4      	RJMP _0x200001B
                 _0x2000023:
000175 c002      	RJMP _0x2000024
                 _0x200001F:
000176 30e2      	CPI  R30,LOW(0x2)
000177 f439      	BRNE _0x2000025
                 _0x2000024:
000178 e050      	LDI  R21,LOW(0)
000179 e013      	LDI  R17,LOW(3)
00017a 3320      	CPI  R18,48
00017b f411      	BRNE _0x2000026
00017c 6800      	ORI  R16,LOW(128)
00017d c0eb      	RJMP _0x200001B
                 _0x2000026:
00017e c003      	RJMP _0x2000027
                 _0x2000025:
00017f 30e3      	CPI  R30,LOW(0x3)
000180 f009      	BREQ PC+2
000181 c0e7      	RJMP _0x200001B
                 _0x2000027:
000182 3320      	CPI  R18,48
000183 f010      	BRLO _0x200002A
000184 332a      	CPI  R18,58
000185 f008      	BRLO _0x200002B
                 _0x200002A:
000186 c007      	RJMP _0x2000029
                 _0x200002B:
000187 e0aa      	LDI  R26,LOW(10)
000188 9f5a      	MUL  R21,R26
000189 2d50      	MOV  R21,R0
00018a 2fe2      	MOV  R30,R18
00018b 53e0      	SUBI R30,LOW(48)
00018c 0f5e      	ADD  R21,R30
00018d c0db      	RJMP _0x200001B
                 _0x2000029:
00018e 2fe2      	MOV  R30,R18
00018f 36e3      	CPI  R30,LOW(0x63)
000190 f449      	BRNE _0x200002F
000191 940e 0356 	CALL SUBOPT_0x1
000193 89e8      	LDD  R30,Y+16
000194 89f9      	LDD  R31,Y+16+1
000195 81a4      	LDD  R26,Z+4
000196 93aa      	ST   -Y,R26
000197 940e 035c 	CALL SUBOPT_0x2
000199 c0ce      	RJMP _0x2000030
                 _0x200002F:
00019a 37e3      	CPI  R30,LOW(0x73)
00019b f441      	BRNE _0x2000032
00019c 940e 0356 	CALL SUBOPT_0x1
00019e 940e 0362 	CALL SUBOPT_0x3
0001a0 940e 0336 	CALL _strlen
0001a2 2f1e      	MOV  R17,R30
0001a3 c00a      	RJMP _0x2000033
                 _0x2000032:
0001a4 37e0      	CPI  R30,LOW(0x70)
0001a5 f461      	BRNE _0x2000035
0001a6 940e 0356 	CALL SUBOPT_0x1
0001a8 940e 0362 	CALL SUBOPT_0x3
0001aa 940e 0342 	CALL _strlenf
0001ac 2f1e      	MOV  R17,R30
0001ad 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001ae 6002      	ORI  R16,LOW(2)
0001af 770f      	ANDI R16,LOW(127)
0001b0 e030      	LDI  R19,LOW(0)
0001b1 c034      	RJMP _0x2000036
                 _0x2000035:
0001b2 36e4      	CPI  R30,LOW(0x64)
0001b3 f011      	BREQ _0x2000039
0001b4 36e9      	CPI  R30,LOW(0x69)
0001b5 f411      	BRNE _0x200003A
                 _0x2000039:
0001b6 6004      	ORI  R16,LOW(4)
0001b7 c002      	RJMP _0x200003B
                 _0x200003A:
0001b8 37e5      	CPI  R30,LOW(0x75)
0001b9 f431      	BRNE _0x200003C
                 _0x200003B:
0001ba e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0001bb e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001bc 83ee      	STD  Y+6,R30
0001bd 83ff      	STD  Y+6+1,R31
0001be e015      	LDI  R17,LOW(5)
0001bf c00c      	RJMP _0x200003D
                 _0x200003C:
0001c0 35e8      	CPI  R30,LOW(0x58)
0001c1 f411      	BRNE _0x200003F
0001c2 6008      	ORI  R16,LOW(8)
0001c3 c003      	RJMP _0x2000040
                 _0x200003F:
0001c4 37e8      	CPI  R30,LOW(0x78)
0001c5 f009      	BREQ PC+2
0001c6 c0a1      	RJMP _0x2000071
                 _0x2000040:
0001c7 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001c8 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001c9 83ee      	STD  Y+6,R30
0001ca 83ff      	STD  Y+6+1,R31
0001cb e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001cc ff02      	SBRS R16,2
0001cd c014      	RJMP _0x2000042
0001ce 940e 0356 	CALL SUBOPT_0x1
0001d0 940e 036c 	CALL SUBOPT_0x4
0001d2 85ab      	LDD  R26,Y+11
0001d3 23aa      	TST  R26
0001d4 f43a      	BRPL _0x2000043
0001d5 85ea      	LDD  R30,Y+10
0001d6 85fb      	LDD  R31,Y+10+1
0001d7 940e 0397 	CALL __ANEGW1
0001d9 87ea      	STD  Y+10,R30
0001da 87fb      	STD  Y+10+1,R31
0001db e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001dc 3040      	CPI  R20,0
0001dd f011      	BREQ _0x2000044
0001de 5f1f      	SUBI R17,-LOW(1)
0001df c001      	RJMP _0x2000045
                 _0x2000044:
0001e0 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001e1 c004      	RJMP _0x2000046
                 _0x2000042:
0001e2 940e 0356 	CALL SUBOPT_0x1
0001e4 940e 036c 	CALL SUBOPT_0x4
                 _0x2000046:
                 _0x2000036:
0001e6 fd00      	SBRC R16,0
0001e7 c011      	RJMP _0x2000047
                 _0x2000048:
0001e8 1715      	CP   R17,R21
0001e9 f478      	BRSH _0x200004A
0001ea ff07      	SBRS R16,7
0001eb c008      	RJMP _0x200004B
0001ec ff02      	SBRS R16,2
0001ed c004      	RJMP _0x200004C
0001ee 7f0b      	ANDI R16,LOW(251)
0001ef 2f24      	MOV  R18,R20
0001f0 5011      	SUBI R17,LOW(1)
0001f1 c001      	RJMP _0x200004D
                 _0x200004C:
0001f2 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001f3 c001      	RJMP _0x200004E
                 _0x200004B:
0001f4 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001f5 940e 034f 	CALL SUBOPT_0x0
0001f7 5051      	SUBI R21,LOW(1)
0001f8 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001f9 2f31      	MOV  R19,R17
0001fa ff01      	SBRS R16,1
0001fb c017      	RJMP _0x200004F
                 _0x2000050:
0001fc 3030      	CPI  R19,0
0001fd f0a1      	BREQ _0x2000052
0001fe ff03      	SBRS R16,3
0001ff c006      	RJMP _0x2000053
000200 81ee      	LDD  R30,Y+6
000201 81ff      	LDD  R31,Y+6+1
000202 9125      	LPM  R18,Z+
000203 83ee      	STD  Y+6,R30
000204 83ff      	STD  Y+6+1,R31
000205 c005      	RJMP _0x2000054
                 _0x2000053:
000206 81ae      	LDD  R26,Y+6
000207 81bf      	LDD  R27,Y+6+1
000208 912d      	LD   R18,X+
000209 83ae      	STD  Y+6,R26
00020a 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00020b 940e 034f 	CALL SUBOPT_0x0
00020d 3050      	CPI  R21,0
00020e f009      	BREQ _0x2000055
00020f 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000210 5031      	SUBI R19,LOW(1)
000211 cfea      	RJMP _0x2000050
                 _0x2000052:
000212 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000213 e320      	LDI  R18,LOW(48)
000214 81ee      	LDD  R30,Y+6
000215 81ff      	LDD  R31,Y+6+1
000216 940e 03a4 	CALL __GETW1PF
000218 87e8      	STD  Y+8,R30
000219 87f9      	STD  Y+8+1,R31
00021a 81ee      	LDD  R30,Y+6
00021b 81ff      	LDD  R31,Y+6+1
00021c 9632      	ADIW R30,2
00021d 83ee      	STD  Y+6,R30
00021e 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00021f 85e8      	LDD  R30,Y+8
000220 85f9      	LDD  R31,Y+8+1
000221 85aa      	LDD  R26,Y+10
000222 85bb      	LDD  R27,Y+10+1
000223 17ae      	CP   R26,R30
000224 07bf      	CPC  R27,R31
000225 f050      	BRLO _0x200005C
000226 5f2f      	SUBI R18,-LOW(1)
000227 85a8      	LDD  R26,Y+8
000228 85b9      	LDD  R27,Y+8+1
000229 85ea      	LDD  R30,Y+10
00022a 85fb      	LDD  R31,Y+10+1
00022b 1bea      	SUB  R30,R26
00022c 0bfb      	SBC  R31,R27
00022d 87ea      	STD  Y+10,R30
00022e 87fb      	STD  Y+10+1,R31
00022f cfef      	RJMP _0x200005A
                 _0x200005C:
000230 332a      	CPI  R18,58
000231 f028      	BRLO _0x200005D
000232 ff03      	SBRS R16,3
000233 c002      	RJMP _0x200005E
000234 5f29      	SUBI R18,-LOW(7)
000235 c001      	RJMP _0x200005F
                 _0x200005E:
000236 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000237 fd04      	SBRC R16,4
000238 c01a      	RJMP _0x2000061
000239 3321      	CPI  R18,49
00023a f420      	BRSH _0x2000063
00023b 85a8      	LDD  R26,Y+8
00023c 85b9      	LDD  R27,Y+8+1
00023d 9711      	SBIW R26,1
00023e f409      	BRNE _0x2000062
                 _0x2000063:
00023f c009      	RJMP _0x20000CD
                 _0x2000062:
000240 1753      	CP   R21,R19
000241 f010      	BRLO _0x2000067
000242 ff00      	SBRS R16,0
000243 c001      	RJMP _0x2000068
                 _0x2000067:
000244 c013      	RJMP _0x2000066
                 _0x2000068:
000245 e220      	LDI  R18,LOW(32)
000246 ff07      	SBRS R16,7
000247 c00b      	RJMP _0x2000069
000248 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000249 6100      	ORI  R16,LOW(16)
00024a ff02      	SBRS R16,2
00024b c007      	RJMP _0x200006A
00024c 7f0b      	ANDI R16,LOW(251)
00024d 934a      	ST   -Y,R20
00024e 940e 035c 	CALL SUBOPT_0x2
000250 3050      	CPI  R21,0
000251 f009      	BREQ _0x200006B
000252 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000253 940e 034f 	CALL SUBOPT_0x0
000255 3050      	CPI  R21,0
000256 f009      	BREQ _0x200006C
000257 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000258 5031      	SUBI R19,LOW(1)
000259 85a8      	LDD  R26,Y+8
00025a 85b9      	LDD  R27,Y+8+1
00025b 9712      	SBIW R26,2
00025c f008      	BRLO _0x2000059
00025d cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00025e ff00      	SBRS R16,0
00025f c008      	RJMP _0x200006D
                 _0x200006E:
000260 3050      	CPI  R21,0
000261 f031      	BREQ _0x2000070
000262 5051      	SUBI R21,LOW(1)
000263 e2e0      	LDI  R30,LOW(32)
000264 93ea      	ST   -Y,R30
000265 940e 035c 	CALL SUBOPT_0x2
000267 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000268 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000269 cee0      	RJMP _0x2000016
                 _0x2000018:
00026a 85ac      	LDD  R26,Y+12
00026b 85bd      	LDD  R27,Y+12+1
00026c 940e 03a0 	CALL __GETW1P
00026e 940e 03b4 	CALL __LOADLOCR6
000270 9664      	ADIW R28,20
000271 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000272 92ff      	PUSH R15
000273 2ef8      	MOV  R15,R24
000274 9726      	SBIW R28,6
000275 940e 03af 	CALL __SAVELOCR4
000277 940e 0374 	CALL SUBOPT_0x5
000279 9730      	SBIW R30,0
00027a f419      	BRNE _0x2000072
00027b efef      	LDI  R30,LOW(65535)
00027c efff      	LDI  R31,HIGH(65535)
00027d c023      	RJMP _0x2080002
                 _0x2000072:
00027e 01de      	MOVW R26,R28
00027f 9616      	ADIW R26,6
000280 940e 0393 	CALL __ADDW2R15
000282 018d      	MOVW R16,R26
000283 940e 0374 	CALL SUBOPT_0x5
000285 83ee      	STD  Y+6,R30
000286 83ff      	STD  Y+6+1,R31
000287 e0e0      	LDI  R30,LOW(0)
000288 87e8      	STD  Y+8,R30
000289 87e9      	STD  Y+8+1,R30
00028a 01de      	MOVW R26,R28
00028b 961a      	ADIW R26,10
00028c 940e 0393 	CALL __ADDW2R15
00028e 940e 03a0 	CALL __GETW1P
000290 93fa      	ST   -Y,R31
000291 93ea      	ST   -Y,R30
000292 931a      	ST   -Y,R17
000293 930a      	ST   -Y,R16
000294 efee      	LDI  R30,LOW(_put_buff_G100)
000295 e0f0      	LDI  R31,HIGH(_put_buff_G100)
000296 93fa      	ST   -Y,R31
000297 93ea      	ST   -Y,R30
000298 01de      	MOVW R26,R28
000299 961a      	ADIW R26,10
00029a dea3      	RCALL __print_G100
00029b 019f      	MOVW R18,R30
00029c 81ae      	LDD  R26,Y+6
00029d 81bf      	LDD  R27,Y+6+1
00029e e0e0      	LDI  R30,LOW(0)
00029f 93ec      	ST   X,R30
0002a0 01f9      	MOVW R30,R18
                 _0x2080002:
0002a1 940e 03b6 	CALL __LOADLOCR4
0002a3 962a      	ADIW R28,10
0002a4 90ff      	POP  R15
0002a5 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002a6 93aa      	ST   -Y,R26
0002a7 b3eb      	IN   R30,0x1B
0002a8 70ef      	ANDI R30,LOW(0xF)
0002a9 2fae      	MOV  R26,R30
0002aa 81e8      	LD   R30,Y
0002ab 7fe0      	ANDI R30,LOW(0xF0)
0002ac 2bea      	OR   R30,R26
0002ad bbeb      	OUT  0x1B,R30
                +
0002ae e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002af 958a     +DEC R24
0002b0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002b1 9ada      	SBI  0x1B,2
                +
0002b2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002b3 958a     +DEC R24
0002b4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002b5 98da      	CBI  0x1B,2
                +
0002b6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002b7 958a     +DEC R24
0002b8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002b9 c07a      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002ba 93aa      	ST   -Y,R26
0002bb 81a8      	LD   R26,Y
0002bc dfe9      	RCALL __lcd_write_nibble_G101
0002bd 81e8          ld    r30,y
0002be 95e2          swap  r30
0002bf 83e8          st    y,r30
0002c0 81a8      	LD   R26,Y
0002c1 dfe4      	RCALL __lcd_write_nibble_G101
                +
0002c2 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002c3 958a     +DEC R24
0002c4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002c5 c06e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002c6 93aa      	ST   -Y,R26
0002c7 81e8      	LD   R30,Y
0002c8 e0f0      	LDI  R31,0
0002c9 5ae0      	SUBI R30,LOW(-__base_y_G101)
0002ca 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0002cb 81e0      	LD   R30,Z
0002cc 81a9      	LDD  R26,Y+1
0002cd 0fae      	ADD  R26,R30
0002ce dfeb      	RCALL __lcd_write_data
0002cf 80d9      	LDD  R13,Y+1
0002d0 80c8      	LDD  R12,Y+0
0002d1 9622      	ADIW R28,2
0002d2 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002d3 e0a2      	LDI  R26,LOW(2)
0002d4 940e 037b 	CALL SUBOPT_0x6
0002d6 e0ac      	LDI  R26,LOW(12)
0002d7 dfe2      	RCALL __lcd_write_data
0002d8 e0a1      	LDI  R26,LOW(1)
0002d9 940e 037b 	CALL SUBOPT_0x6
0002db e0e0      	LDI  R30,LOW(0)
0002dc 2ece      	MOV  R12,R30
0002dd 2ede      	MOV  R13,R30
0002de 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002df 93aa      	ST   -Y,R26
0002e0 81a8      	LD   R26,Y
0002e1 30aa      	CPI  R26,LOW(0xA)
0002e2 f021      	BREQ _0x2020005
0002e3 91e0 0264 	LDS  R30,__lcd_maxx
0002e5 16de      	CP   R13,R30
0002e6 f048      	BRLO _0x2020004
                 _0x2020005:
0002e7 e0e0      	LDI  R30,LOW(0)
0002e8 93ea      	ST   -Y,R30
0002e9 94c3      	INC  R12
0002ea 2dac      	MOV  R26,R12
0002eb dfda      	RCALL _lcd_gotoxy
0002ec 81a8      	LD   R26,Y
0002ed 30aa      	CPI  R26,LOW(0xA)
0002ee f409      	BRNE _0x2020007
0002ef c044      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
0002f0 94d3      	INC  R13
0002f1 9ad8      	SBI  0x1B,0
0002f2 81a8      	LD   R26,Y
0002f3 dfc6      	RCALL __lcd_write_data
0002f4 98d8      	CBI  0x1B,0
0002f5 c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002f6 93ba      	ST   -Y,R27
0002f7 93aa      	ST   -Y,R26
0002f8 931a      	ST   -Y,R17
                 _0x2020008:
0002f9 81a9      	LDD  R26,Y+1
0002fa 81ba      	LDD  R27,Y+1+1
0002fb 91ed      	LD   R30,X+
0002fc 83a9      	STD  Y+1,R26
0002fd 83ba      	STD  Y+1+1,R27
0002fe 2f1e      	MOV  R17,R30
0002ff 30e0      	CPI  R30,0
000300 f019      	BREQ _0x202000A
000301 2fa1      	MOV  R26,R17
000302 dfdc      	RCALL _lcd_putchar
000303 cff5      	RJMP _0x2020008
                 _0x202000A:
000304 8118      	LDD  R17,Y+0
000305 9623      	ADIW R28,3
000306 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000307 93aa      	ST   -Y,R26
000308 b3ea      	IN   R30,0x1A
000309 6fe0      	ORI  R30,LOW(0xF0)
00030a bbea      	OUT  0x1A,R30
00030b 9ad2      	SBI  0x1A,2
00030c 9ad0      	SBI  0x1A,0
00030d 9ad1      	SBI  0x1A,1
00030e 98da      	CBI  0x1B,2
00030f 98d8      	CBI  0x1B,0
000310 98d9      	CBI  0x1B,1
000311 81e8      	LD   R30,Y
000312 93e0 0264 	STS  __lcd_maxx,R30
000314 58e0      	SUBI R30,-LOW(128)
                +
000315 93e0 0262+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000317 81e8      	LD   R30,Y
000318 54e0      	SUBI R30,-LOW(192)
                +
000319 93e0 0263+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00031b e1a4      	LDI  R26,LOW(20)
00031c e0b0      	LDI  R27,0
00031d 940e 0389 	CALL _delay_ms
00031f 940e 0381 	CALL SUBOPT_0x7
000321 940e 0381 	CALL SUBOPT_0x7
000323 940e 0381 	CALL SUBOPT_0x7
000325 e2a0      	LDI  R26,LOW(32)
000326 df7f      	RCALL __lcd_write_nibble_G101
                +
000327 ec88     +LDI R24 , LOW ( 200 )
000328 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000329 9701     +SBIW R24 , 1
00032a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00032b e2a8      	LDI  R26,LOW(40)
00032c df8d      	RCALL __lcd_write_data
00032d e0a4      	LDI  R26,LOW(4)
00032e df8b      	RCALL __lcd_write_data
00032f e8a5      	LDI  R26,LOW(133)
000330 df89      	RCALL __lcd_write_data
000331 e0a6      	LDI  R26,LOW(6)
000332 df87      	RCALL __lcd_write_data
000333 df9f      	RCALL _lcd_clear
                 _0x2080001:
000334 9621      	ADIW R28,1
000335 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000336 93ba      	ST   -Y,R27
000337 93aa      	ST   -Y,R26
000338 91a9          ld   r26,y+
000339 91b9          ld   r27,y+
00033a 27ee          clr  r30
00033b 27ff          clr  r31
                 strlen0:
00033c 916d          ld   r22,x+
00033d 2366          tst  r22
00033e f011          breq strlen1
00033f 9631          adiw r30,1
000340 cffb          rjmp strlen0
                 strlen1:
000341 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000342 93ba      	ST   -Y,R27
000343 93aa      	ST   -Y,R26
000344 27aa          clr  r26
000345 27bb          clr  r27
000346 91e9          ld   r30,y+
000347 91f9          ld   r31,y+
                 strlenf0:
000348 9005      	lpm  r0,z+
000349 2000          tst  r0
00034a f011          breq strlenf1
00034b 9611          adiw r26,1
00034c cffb          rjmp strlenf0
                 strlenf1:
00034d 01fd          movw r30,r26
00034e 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G101:
000260           	.BYTE 0x4
                 __lcd_maxx:
000264           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
00034f 932a      	ST   -Y,R18
000350 85ad      	LDD  R26,Y+13
000351 85be      	LDD  R27,Y+13+1
000352 85ef      	LDD  R30,Y+15
000353 89f8      	LDD  R31,Y+15+1
000354 9509      	ICALL
000355 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000356 89e8      	LDD  R30,Y+16
000357 89f9      	LDD  R31,Y+16+1
000358 9734      	SBIW R30,4
000359 8be8      	STD  Y+16,R30
00035a 8bf9      	STD  Y+16+1,R31
00035b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
00035c 85ad      	LDD  R26,Y+13
00035d 85be      	LDD  R27,Y+13+1
00035e 85ef      	LDD  R30,Y+15
00035f 89f8      	LDD  R31,Y+15+1
000360 9509      	ICALL
000361 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000362 89a8      	LDD  R26,Y+16
000363 89b9      	LDD  R27,Y+16+1
000364 9614      	ADIW R26,4
000365 940e 03a0 	CALL __GETW1P
000367 83ee      	STD  Y+6,R30
000368 83ff      	STD  Y+6+1,R31
000369 81ae      	LDD  R26,Y+6
00036a 81bf      	LDD  R27,Y+6+1
00036b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
00036c 89a8      	LDD  R26,Y+16
00036d 89b9      	LDD  R27,Y+16+1
00036e 9614      	ADIW R26,4
00036f 940e 03a0 	CALL __GETW1P
000371 87ea      	STD  Y+10,R30
000372 87fb      	STD  Y+10+1,R31
000373 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000374 01de      	MOVW R26,R28
000375 961c      	ADIW R26,12
000376 940e 0393 	CALL __ADDW2R15
000378 940e 03a0 	CALL __GETW1P
00037a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00037b 940e 02ba 	CALL __lcd_write_data
00037d e0a3      	LDI  R26,LOW(3)
00037e e0b0      	LDI  R27,0
00037f 940c 0389 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
000381 e3a0      	LDI  R26,LOW(48)
000382 940e 02a6 	CALL __lcd_write_nibble_G101
                +
000384 ec88     +LDI R24 , LOW ( 200 )
000385 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000386 9701     +SBIW R24 , 1
000387 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000388 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000389 9610      	adiw r26,0
00038a f039      	breq __delay_ms1
                 __delay_ms0:
                +
00038b ed80     +LDI R24 , LOW ( 0x7D0 )
00038c e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00038d 9701     +SBIW R24 , 1
00038e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00038f 95a8      	wdr
000390 9711      	sbiw r26,1
000391 f7c9      	brne __delay_ms0
                 __delay_ms1:
000392 9508      	ret
                 
                 __ADDW2R15:
000393 2400      	CLR  R0
000394 0daf      	ADD  R26,R15
000395 1db0      	ADC  R27,R0
000396 9508      	RET
                 
                 __ANEGW1:
000397 95f1      	NEG  R31
000398 95e1      	NEG  R30
000399 40f0      	SBCI R31,0
00039a 9508      	RET
                 
                 __CWD1:
00039b 2f6f      	MOV  R22,R31
00039c 0f66      	ADD  R22,R22
00039d 0b66      	SBC  R22,R22
00039e 2f76      	MOV  R23,R22
00039f 9508      	RET
                 
                 __GETW1P:
0003a0 91ed      	LD   R30,X+
0003a1 91fc      	LD   R31,X
0003a2 9711      	SBIW R26,1
0003a3 9508      	RET
                 
                 __GETW1PF:
0003a4 9005      	LPM  R0,Z+
0003a5 91f4      	LPM  R31,Z
0003a6 2de0      	MOV  R30,R0
0003a7 9508      	RET
                 
                 __PUTPARD1:
0003a8 937a      	ST   -Y,R23
0003a9 936a      	ST   -Y,R22
0003aa 93fa      	ST   -Y,R31
0003ab 93ea      	ST   -Y,R30
0003ac 9508      	RET
                 
                 __SAVELOCR6:
0003ad 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003ae 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003af 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003b0 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003b1 931a      	ST   -Y,R17
0003b2 930a      	ST   -Y,R16
0003b3 9508      	RET
                 
                 __LOADLOCR6:
0003b4 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003b5 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003b6 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003b7 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003b8 8119      	LDD  R17,Y+1
0003b9 8108      	LD   R16,Y
0003ba 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0003bb 0fac      	ADD  R26,R28
0003bc 1fbd      	ADC  R27,R29
                 __INITLOC0:
0003bd 9005      	LPM  R0,Z+
0003be 920d      	ST   X+,R0
0003bf 958a      	DEC  R24
0003c0 f7e1      	BRNE __INITLOC0
0003c1 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  13 r1 :   1 r2 :   0 r3 :   0 r4 :   3 r5 :   1 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   5 r11:   1 r12:   4 r13:   4 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  25 r25:   5 r26: 114 r27:  41 r28:  19 r29:   2 r30: 201 r31:  74 
x  :  24 y  : 175 z  :  16 
Registers used: 29 out of 35 (82.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :  27 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  37 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  53 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   8 cpi   :  38 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   2 jmp   :  23 ld    :  28 ldd   :  78 ldi   : 112 
lds   :   1 lpm   :  15 lsl   :   0 lsr   :   0 mov   :  19 movw  :  24 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   9 out   :  20 pop   :   1 push  :   1 rcall :  16 ret   :  28 
reti  :   1 rjmp  :  63 rol   :   0 ror   :   0 sbc   :   3 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  65 std   :  31 sts   :   3 sub   :   2 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 55 out of 116 (47.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000784   1856     68   1924   32768   5.9%
[.dseg] 0x000060 0x000265      0      5      5    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
