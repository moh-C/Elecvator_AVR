
AVRASM ver. 2.1.30  C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm Sun Jan 17 08:13:38 2021

C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _globalTimer=R4
                 	.DEF _globalTimer_msb=R5
                 	.DEF _second=R6
                 	.DEF _second_msb=R7
                 	.DEF _currentFloor=R8
                 	.DEF _currentFloor_msb=R9
                 	.DEF _target=R10
                 	.DEF _target_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0061 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 008e 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0012      	.DW  0x0012
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x1C:
000038 0000
000039 0000
00003a 0000
00003b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00003c 0000
00003d 0000
00003e 0000
00003f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000040 0000
000041 0000
000042 0000
000043 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000044 0000
000045 0000
000046 0000
000047 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
000048 3a46
000049 2520
00004a 2c64
00004b 2520      	.DB  0x46,0x3A,0x20,0x25,0x64,0x2C,0x20,0x25
00004c 2c64
00004d 2520
00004e 0064
00004f 4643      	.DB  0x64,0x2C,0x20,0x25,0x64,0x0,0x43,0x46
000050 203a
000051 6425
000052 542c
000053 203a      	.DB  0x3A,0x20,0x25,0x64,0x2C,0x54,0x3A,0x20
000054 6425
C:\Users\moham\Desktop\Ashar_Micro\Debug\List\G3.asm(1152): warning: .cseg .db misalignment - padding zero byte
000055 0000      	.DB  0x25,0x64,0x0
                 _0x2020003:
000056 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000057 0001      	.DW  0x01
000058 0002      	.DW  0x02
000059 0066      	.DW  __REG_BIT_VARS*2
                 
00005a 0008      	.DW  0x08
00005b 0004      	.DW  0x04
00005c 0068      	.DW  __REG_VARS*2
                 
00005d 0002      	.DW  0x02
00005e 0260      	.DW  __base_y_G101
00005f 00ac      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000060 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000061 94f8      	CLI
000062 27ee      	CLR  R30
000063 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000064 e0f1      	LDI  R31,1
000065 bffb      	OUT  GICR,R31
000066 bfeb      	OUT  GICR,R30
000067 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000068 e08d      	LDI  R24,(14-2)+1
000069 e0a2      	LDI  R26,2
00006a 27bb      	CLR  R27
                 __CLEAR_REG:
00006b 93ed      	ST   X+,R30
00006c 958a      	DEC  R24
00006d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006f e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000070 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000071 93ed      	ST   X+,R30
000072 9701      	SBIW R24,1
000073 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000074 eaee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000075 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000076 9185      	LPM  R24,Z+
000077 9195      	LPM  R25,Z+
000078 9700      	SBIW R24,0
000079 f061      	BREQ __GLOBAL_INI_END
00007a 91a5      	LPM  R26,Z+
00007b 91b5      	LPM  R27,Z+
00007c 9005      	LPM  R0,Z+
00007d 9015      	LPM  R1,Z+
00007e 01bf      	MOVW R22,R30
00007f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000080 9005      	LPM  R0,Z+
000081 920d      	ST   X+,R0
000082 9701      	SBIW R24,1
000083 f7e1      	BRNE __GLOBAL_INI_LOOP
000084 01fb      	MOVW R30,R22
000085 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000086 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000087 bfed      	OUT  SPL,R30
000088 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000089 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008b e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008c 940c 0118 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;int globalTimer = 0;    // Global timer with period of 8 ms
                 ;int second = 0;         // Seconds passed
                 ;
                 ;int currentFloor = 0;   // The current floor
                 ;int target = 0;         // This is the target floor
                 ;bit locked = 0;         // The Elevator is now locked
                 ;bit firstIter = 1;      // First Iter is for reseting the timer and servo position
                 ;bit DCMotors = 0;       // Controlling the DC motors
                 ;bit shouldMove = 0;     // This bit is for making sure we are capturing the inputs
                 ;bit doorOpen = 1;       // Checking door
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0016 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
00008e 920a      	ST   -Y,R0
00008f 921a      	ST   -Y,R1
000090 939a      	ST   -Y,R25
000091 93aa      	ST   -Y,R26
000092 93ba      	ST   -Y,R27
000093 93ea      	ST   -Y,R30
000094 93fa      	ST   -Y,R31
000095 b7ef      	IN   R30,SREG
000096 93ea      	ST   -Y,R30
                 ; 0000 0017     // Place your code here
                 ; 0000 0018     globalTimer++;
000097 01f2      	MOVW R30,R4
000098 9631      	ADIW R30,1
000099 012f      	MOVW R4,R30
                 ; 0000 0019     if(globalTimer%125==0) {
00009a 01d2      	MOVW R26,R4
00009b e7ed      	LDI  R30,LOW(125)
00009c e0f0      	LDI  R31,HIGH(125)
00009d 940e 0417 	CALL __MODW21
00009f 9730      	SBIW R30,0
0000a0 f431      	BRNE _0x3
                 ; 0000 001A         second++;
0000a1 01f3      	MOVW R30,R6
0000a2 9631      	ADIW R30,1
0000a3 013f      	MOVW R6,R30
0000a4 9731      	SBIW R30,1
                 ; 0000 001B         globalTimer = 0;
0000a5 2444      	CLR  R4
0000a6 2455      	CLR  R5
                 ; 0000 001C     }
                 ; 0000 001D }
                 _0x3:
0000a7 91e9      	LD   R30,Y+
0000a8 bfef      	OUT  SREG,R30
0000a9 91f9      	LD   R31,Y+
0000aa 91e9      	LD   R30,Y+
0000ab 91b9      	LD   R27,Y+
0000ac 91a9      	LD   R26,Y+
0000ad 9199      	LD   R25,Y+
0000ae 9019      	LD   R1,Y+
0000af 9009      	LD   R0,Y+
0000b0 9518      	RETI
                 ; .FEND
                 ;
                 ;// Reset timer and globalTimer and second
                 ;void reset_timer()
                 ; 0000 0021 {
                 ; 0000 0022     TCNT0 = 0x00;       // Set the counter to zero
                 ; 0000 0023     globalTimer = 0;    // 8ms counter is reset
                 ; 0000 0024     second = 0;         // Resetting the second
                 ; 0000 0025     lcd_clear();
                 ; 0000 0026 }
                 ;
                 ;// For controlling the DC Motors
                 ;void DC_motor(int position)
                 ; 0000 002A {
                 _DC_motor:
                 ; .FSTART _DC_motor
                 ; 0000 002B     // The PWM is in range of 0 to 19999!
                 ; 0000 002C     OCR1B = (position) * 10 * 20;
0000b1 93ba      	ST   -Y,R27
0000b2 93aa      	ST   -Y,R26
                 ;	position -> Y+0
0000b3 81e8      	LD   R30,Y
0000b4 81f9      	LDD  R31,Y+1
0000b5 e0aa      	LDI  R26,LOW(10)
0000b6 e0b0      	LDI  R27,HIGH(10)
0000b7 940e 03fa 	CALL __MULW12
0000b9 e1a4      	LDI  R26,LOW(20)
0000ba e0b0      	LDI  R27,HIGH(20)
0000bb 940e 03fa 	CALL __MULW12
0000bd bdf9      	OUT  0x28+1,R31
0000be bde8      	OUT  0x28,R30
                 ; 0000 002D }
0000bf 940c 031e 	JMP  _0x2080002
                 ; .FEND
                 ;
                 ;// Given a degree, the servo with move to the desired degree/step.
                 ;// For example 0 will result in 0 degrees and 90 is result in 90 degrees
                 ;void servo_position(int position)
                 ; 0000 0032 {
                 _servo_position:
                 ; .FSTART _servo_position
                 ; 0000 0033     // Servo has to move in range of 0 to 90 degrees thus according to datasheet,
                 ; 0000 0034     // a pulse with a width of 1.5ms will result in 0 degree while a pulse with a
                 ; 0000 0035     // width of 2 ms will result in 90 degrees!
                 ; 0000 0036     OCR1A = 1499 + position * 50/9;
0000c1 93ba      	ST   -Y,R27
0000c2 93aa      	ST   -Y,R26
                 ;	position -> Y+0
0000c3 81e8      	LD   R30,Y
0000c4 81f9      	LDD  R31,Y+1
0000c5 e3a2      	LDI  R26,LOW(50)
0000c6 e0b0      	LDI  R27,HIGH(50)
0000c7 940e 03fa 	CALL __MULW12
0000c9 01df      	MOVW R26,R30
0000ca e0e9      	LDI  R30,LOW(9)
0000cb e0f0      	LDI  R31,HIGH(9)
0000cc 940e 0412 	CALL __DIVW21
0000ce 52e5      	SUBI R30,LOW(-1499)
0000cf 4ffa      	SBCI R31,HIGH(-1499)
0000d0 bdfb      	OUT  0x2A+1,R31
0000d1 bdea      	OUT  0x2A,R30
                 ; 0000 0037 }
0000d2 940c 031e 	JMP  _0x2080002
                 ; .FEND
                 ;
                 ;// Processing the input from buttons
                 ;void process_input()
                 ; 0000 003B {
                 ; 0000 003C 
                 ; 0000 003D     // First of all we have to check whether we are in locked mode or not
                 ; 0000 003E     if(!locked && !shouldMove) {
                 ; 0000 003F         int tempTarget = 255-PINB; // PINB is the input/target
                 ; 0000 0040 
                 ; 0000 0041         switch(tempTarget)
                 ;	tempTarget -> Y+0
                 ; 0000 0042         {
                 ; 0000 0043             case 1:
                 ; 0000 0044                 target = 0;
                 ; 0000 0045                 break;
                 ; 0000 0046             case 2:
                 ; 0000 0047                 target = 1;
                 ; 0000 0048                 break;
                 ; 0000 0049             case 4:
                 ; 0000 004A                 target = 2;
                 ; 0000 004B                 break;
                 ; 0000 004C             case 8:
                 ; 0000 004D                 target = 3;
                 ; 0000 004E                 break;
                 ; 0000 004F             case 16:
                 ; 0000 0050                 target = 4;
                 ; 0000 0051                 break;
                 ; 0000 0052         }
                 ; 0000 0053 
                 ; 0000 0054         if(target!=currentFloor) shouldMove = 1;
                 ; 0000 0055     }
                 ; 0000 0056 }
                 ;
                 ;// Processing the floor to be displayed in LCD and furthur processings
                 ;void process_floors()
                 ; 0000 005A {
                 ; 0000 005B     if(target>currentFloor) currentFloor++;
                 ; 0000 005C     else currentFloor--;
                 ; 0000 005D }
                 ;
                 ;// Moving the servo motors
                 ;void process_servo_motors()
                 ; 0000 0061 {
                 ; 0000 0062     if(doorOpen)    servo_position(0);
                 ; 0000 0063     else    servo_position(90);
                 ; 0000 0064 }
                 ;
                 ;// Moving the DC motors as well as controlling the speed
                 ;void process_dc_motors()
                 ; 0000 0068 {
                 ; 0000 0069     // Difference of floors
                 ; 0000 006A     int difference = target - difference;
                 ; 0000 006B     // If negative, negate it
                 ; 0000 006C     if(difference < 0) difference*=-1;
                 ;	difference -> R16,R17
                 ; 0000 006D 
                 ; 0000 006E     // If DC motors should be moving start moving them
                 ; 0000 006F     if(DCMotors){
                 ; 0000 0070         // If we are in the first second, accelerate and if we are in the middle of the transportation
                 ; 0000 0071         // constant speed. Otherwise, decelerate
                 ; 0000 0072 
                 ; 0000 0073         if(second <= 1)
                 ; 0000 0074             DC_motor(80 * globalTimer * 10);
                 ; 0000 0075         else if(second == 4 && difference == 1) DC_motor(80 * (125-globalTimer) * 10);
                 ; 0000 0076         else DC_motor(80*125*10);
                 ; 0000 0077     }
                 ; 0000 0078 }
                 ;
                 ;// Writing to LCD
                 ;void LCD_controller(int level)
                 ; 0000 007C {
                 _LCD_controller:
                 ; .FSTART _LCD_controller
                 ; 0000 007D     char currFloor[16] = "";                    // What we are going to display
                 ; 0000 007E     char myMan[16] = "";
                 ; 0000 007F 
                 ; 0000 0080     sprintf(currFloor,"F: %d, %d, %d",level, globalTimer, second);       // Making the text ready for display
0000d4 93ba      	ST   -Y,R27
0000d5 93aa      	ST   -Y,R26
0000d6 97a0      	SBIW R28,32
0000d7 e280      	LDI  R24,32
0000d8 e0a0      	LDI  R26,LOW(0)
0000d9 e0b0      	LDI  R27,HIGH(0)
0000da e7e0      	LDI  R30,LOW(_0x1C*2)
0000db e0f0      	LDI  R31,HIGH(_0x1C*2)
0000dc 940e 044e 	CALL __INITLOCB
                 ;	level -> Y+32
                 ;	currFloor -> Y+16
                 ;	myMan -> Y+0
0000de 01fe      	MOVW R30,R28
0000df 9670      	ADIW R30,16
0000e0 93fa      	ST   -Y,R31
0000e1 93ea      	ST   -Y,R30
                +
0000e2 e9e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000e3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000e4 93fa      	ST   -Y,R31
0000e5 93ea      	ST   -Y,R30
0000e6 a1ec      	LDD  R30,Y+36
0000e7 a1fd      	LDD  R31,Y+36+1
0000e8 940e 039c 	CALL SUBOPT_0x0
0000ea 01f2      	MOVW R30,R4
0000eb 940e 039c 	CALL SUBOPT_0x0
0000ed 01f3      	MOVW R30,R6
0000ee 940e 039c 	CALL SUBOPT_0x0
0000f0 e08c      	LDI  R24,12
0000f1 940e 02bf 	CALL _sprintf
0000f3 9660      	ADIW R28,16
                 ; 0000 0081     lcd_gotoxy(0,0);                            //lcd_gotoxy ham k cursor ro b xy mibarad
0000f4 e0e0      	LDI  R30,LOW(0)
0000f5 93ea      	ST   -Y,R30
0000f6 e0a0      	LDI  R26,LOW(0)
0000f7 940e 0313 	CALL _lcd_gotoxy
                 ; 0000 0082     lcd_puts(currFloor);                        // chap bar roye lcd
0000f9 01de      	MOVW R26,R28
0000fa 9650      	ADIW R26,16
0000fb 940e 0343 	CALL _lcd_puts
                 ; 0000 0083 
                 ; 0000 0084     sprintf(myMan,"CF: %d,T: %d",currentFloor, target);    // Making the text ready for display
0000fd 01fe      	MOVW R30,R28
0000fe 93fa      	ST   -Y,R31
0000ff 93ea      	ST   -Y,R30
                +
000100 e9ee     +LDI R30 , LOW ( 2 * _0x0 + ( 14 ) )
000101 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW1FN _0x0,14
000102 93fa      	ST   -Y,R31
000103 93ea      	ST   -Y,R30
000104 01f4      	MOVW R30,R8
000105 940e 039c 	CALL SUBOPT_0x0
000107 01f5      	MOVW R30,R10
000108 940e 039c 	CALL SUBOPT_0x0
00010a e088      	LDI  R24,8
00010b 940e 02bf 	CALL _sprintf
00010d 962c      	ADIW R28,12
                 ; 0000 0085     lcd_gotoxy(0,1);                            //lcd_gotoxy ham k cursor ro b xy mibarad
00010e e0e0      	LDI  R30,LOW(0)
00010f 93ea      	ST   -Y,R30
000110 e0a1      	LDI  R26,LOW(1)
000111 940e 0313 	CALL _lcd_gotoxy
                 ; 0000 0086     lcd_puts(myMan);
000113 01de      	MOVW R26,R28
000114 940e 0343 	CALL _lcd_puts
                 ; 0000 0087 }
000116 96a2      	ADIW R28,34
000117 9508      	RET
                 ; .FEND
                 ;
                 ;// Well this is obvious
                 ;void main(void)
                 ; 0000 008B {
                 _main:
                 ; .FSTART _main
                 ; 0000 008C     // Declare your local variables here
                 ; 0000 008D     DDRA = 0xFF;
000118 efef      	LDI  R30,LOW(255)
000119 bbea      	OUT  0x1A,R30
                 ; 0000 008E     DDRB = 0x00;
00011a e0e0      	LDI  R30,LOW(0)
00011b bbe7      	OUT  0x17,R30
                 ; 0000 008F     DDRD = 0xFF;
00011c efef      	LDI  R30,LOW(255)
00011d bbe1      	OUT  0x11,R30
                 ; 0000 0090     PORTB = 0xFF;
00011e bbe8      	OUT  0x18,R30
                 ; 0000 0091 
                 ; 0000 0092     // Timer/Counter 0 initialization
                 ; 0000 0093 // Clock source: System Clock
                 ; 0000 0094 // Clock value: 31.250 kHz
                 ; 0000 0095 // Mode: CTC top=OCR0
                 ; 0000 0096 // OC0 output: Disconnected
                 ; 0000 0097 // Timer Period: 8 ms
                 ; 0000 0098 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
00011f e0ec      	LDI  R30,LOW(12)
000120 bfe3      	OUT  0x33,R30
                 ; 0000 0099 TCNT0=0x00;
000121 e0e0      	LDI  R30,LOW(0)
000122 bfe2      	OUT  0x32,R30
                 ; 0000 009A OCR0=0xF9;
000123 efe9      	LDI  R30,LOW(249)
000124 bfec      	OUT  0x3C,R30
                 ; 0000 009B 
                 ; 0000 009C     // Configure Timer1
                 ; 0000 009D     TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);     //NON Inverted PWM
000125 b5ef      	IN   R30,0x2F
000126 6ae2      	ORI  R30,LOW(0xA2)
000127 bdef      	OUT  0x2F,R30
                 ; 0000 009E     TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11);        //PRESCALER=8 MODE 14(FAST PWM)
000128 b5ee      	IN   R30,0x2E
000129 61ea      	ORI  R30,LOW(0x1A)
00012a bdee      	OUT  0x2E,R30
                 ; 0000 009F 
                 ; 0000 00A0     // ICR = 19,999 so fPWM = 8,000,000/ (19,999+1) / 8 = 50Hz
                 ; 0000 00A1     ICR1H=0x4E;
00012b e4ee      	LDI  R30,LOW(78)
00012c bde7      	OUT  0x27,R30
                 ; 0000 00A2     ICR1L=0x1F;
00012d e1ef      	LDI  R30,LOW(31)
00012e bde6      	OUT  0x26,R30
                 ; 0000 00A3 
                 ; 0000 00A4 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00A5 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
00012f e0e1      	LDI  R30,LOW(1)
000130 bfe9      	OUT  0x39,R30
                 ; 0000 00A6 
                 ; 0000 00A7 
                 ; 0000 00A8     lcd_init(16);
000131 e1a0      	LDI  R26,LOW(16)
000132 940e 0354 	CALL _lcd_init
                 ; 0000 00A9 
                 ; 0000 00AA     // Start the servo at rest
                 ; 0000 00AB     /*
                 ; 0000 00AC     servo_position(0);
                 ; 0000 00AD     DC_motor(0);
                 ; 0000 00AE     */
                 ; 0000 00AF 
                 ; 0000 00B0     // Global enable interrupts
                 ; 0000 00B1     #asm("sei")
000134 9478      	sei
                 ; 0000 00B2 
                 ; 0000 00B3     while (1) {
                 _0x1D:
                 ; 0000 00B4         /*
                 ; 0000 00B5         // Place your code here
                 ; 0000 00B6         process_input();
                 ; 0000 00B7         LCD_controller(currentFloor);
                 ; 0000 00B8         process_dc_motors();
                 ; 0000 00B9         process_servo_motors();
                 ; 0000 00BA 
                 ; 0000 00BB         if(target==currentFloor){}
                 ; 0000 00BC         else {
                 ; 0000 00BD             // Checking for first iteration to avoid malfunction
                 ; 0000 00BE             if(firstIter) {
                 ; 0000 00BF                 doorOpen = 0;
                 ; 0000 00C0                 reset_timer();
                 ; 0000 00C1                 firstIter = 0;
                 ; 0000 00C2             }
                 ; 0000 00C3         }
                 ; 0000 00C4         */
                 ; 0000 00C5         LCD_controller(currentFloor);
000135 01d4      	MOVW R26,R8
000136 df9d      	RCALL _LCD_controller
                 ; 0000 00C6 
                 ; 0000 00C7         if(second%2){
000137 01d3      	MOVW R26,R6
000138 e0e2      	LDI  R30,LOW(2)
000139 e0f0      	LDI  R31,HIGH(2)
00013a 940e 0417 	CALL __MODW21
00013c 9730      	SBIW R30,0
00013d f029      	BREQ _0x20
                 ; 0000 00C8             servo_position(90);
00013e e5aa      	LDI  R26,LOW(90)
00013f e0b0      	LDI  R27,0
000140 df80      	RCALL _servo_position
                 ; 0000 00C9             DC_motor(90);
000141 e5aa      	LDI  R26,LOW(90)
000142 c004      	RJMP _0x27
                 ; 0000 00CA         }
                 ; 0000 00CB         else {
                 _0x20:
                 ; 0000 00CC             servo_position(0);
000143 e0a0      	LDI  R26,LOW(0)
000144 e0b0      	LDI  R27,0
000145 df7b      	RCALL _servo_position
                 ; 0000 00CD             DC_motor(0);
000146 e0a0      	LDI  R26,LOW(0)
                 _0x27:
000147 e0b0      	LDI  R27,0
000148 df68      	RCALL _DC_motor
                 ; 0000 00CE         }
                 ; 0000 00CF 
                 ; 0000 00D0     }
000149 cfeb      	RJMP _0x1D
                 ; 0000 00D1 }
                 _0x22:
00014a cfff      	RJMP _0x22
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00014b 93ba      	ST   -Y,R27
00014c 93aa      	ST   -Y,R26
00014d 931a      	ST   -Y,R17
00014e 930a      	ST   -Y,R16
00014f 81aa      	LDD  R26,Y+2
000150 81bb      	LDD  R27,Y+2+1
000151 9612      	ADIW R26,2
000152 940e 0433 	CALL __GETW1P
000154 9730      	SBIW R30,0
000155 f159      	BREQ _0x2000010
000156 81aa      	LDD  R26,Y+2
000157 81bb      	LDD  R27,Y+2+1
000158 9614      	ADIW R26,4
000159 940e 0433 	CALL __GETW1P
00015b 018f      	MOVW R16,R30
00015c 9730      	SBIW R30,0
00015d f061      	BREQ _0x2000012
                +
00015e 3002     +CPI R16 , LOW ( 2 )
00015f e0e0     +LDI R30 , HIGH ( 2 )
000160 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000161 f098      	BRLO _0x2000013
000162 01f8      	MOVW R30,R16
000163 9731      	SBIW R30,1
000164 018f      	MOVW R16,R30
                +
000165 81aa     +LDD R26 , Y + 2
000166 81bb     +LDD R27 , Y + 2 + 1
000167 9614     +ADIW R26 , 4
000168 93ed     +ST X + , R30
000169 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00016a 81aa      	LDD  R26,Y+2
00016b 81bb      	LDD  R27,Y+2+1
00016c 9612      	ADIW R26,2
00016d 91ed      	LD   R30,X+
00016e 91fd      	LD   R31,X+
00016f 9631      	ADIW R30,1
000170 93fe      	ST   -X,R31
000171 93ee      	ST   -X,R30
000172 9731      	SBIW R30,1
000173 81ac      	LDD  R26,Y+4
000174 83a0      	STD  Z+0,R26
                 _0x2000013:
000175 81aa      	LDD  R26,Y+2
000176 81bb      	LDD  R27,Y+2+1
000177 940e 0433 	CALL __GETW1P
000179 23ff      	TST  R31
00017a f02a      	BRMI _0x2000014
00017b 91ed      	LD   R30,X+
00017c 91fd      	LD   R31,X+
00017d 9631      	ADIW R30,1
00017e 93fe      	ST   -X,R31
00017f 93ee      	ST   -X,R30
                 _0x2000014:
000180 c006      	RJMP _0x2000015
                 _0x2000010:
000181 81aa      	LDD  R26,Y+2
000182 81bb      	LDD  R27,Y+2+1
000183 efef      	LDI  R30,LOW(65535)
000184 efff      	LDI  R31,HIGH(65535)
000185 93ed      	ST   X+,R30
000186 93fc      	ST   X,R31
                 _0x2000015:
000187 8119      	LDD  R17,Y+1
000188 8108      	LDD  R16,Y+0
000189 9625      	ADIW R28,5
00018a 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00018b 93ba      	ST   -Y,R27
00018c 93aa      	ST   -Y,R26
00018d 9726      	SBIW R28,6
00018e 940e 0440 	CALL __SAVELOCR6
000190 e010      	LDI  R17,0
000191 85ac      	LDD  R26,Y+12
000192 85bd      	LDD  R27,Y+12+1
000193 e0e0      	LDI  R30,LOW(0)
000194 e0f0      	LDI  R31,HIGH(0)
000195 93ed      	ST   X+,R30
000196 93fc      	ST   X,R31
                 _0x2000016:
000197 89ea      	LDD  R30,Y+18
000198 89fb      	LDD  R31,Y+18+1
000199 9631      	ADIW R30,1
00019a 8bea      	STD  Y+18,R30
00019b 8bfb      	STD  Y+18+1,R31
00019c 9731      	SBIW R30,1
00019d 91e4      	LPM  R30,Z
00019e 2f2e      	MOV  R18,R30
00019f 30e0      	CPI  R30,0
0001a0 f409      	BRNE PC+2
0001a1 c115      	RJMP _0x2000018
0001a2 2fe1      	MOV  R30,R17
0001a3 30e0      	CPI  R30,0
0001a4 f439      	BRNE _0x200001C
0001a5 3225      	CPI  R18,37
0001a6 f411      	BRNE _0x200001D
0001a7 e011      	LDI  R17,LOW(1)
0001a8 c002      	RJMP _0x200001E
                 _0x200001D:
0001a9 940e 03a1 	CALL SUBOPT_0x1
                 _0x200001E:
0001ab c10a      	RJMP _0x200001B
                 _0x200001C:
0001ac 30e1      	CPI  R30,LOW(0x1)
0001ad f4a9      	BRNE _0x200001F
0001ae 3225      	CPI  R18,37
0001af f419      	BRNE _0x2000020
0001b0 940e 03a1 	CALL SUBOPT_0x1
0001b2 c102      	RJMP _0x20000CC
                 _0x2000020:
0001b3 e012      	LDI  R17,LOW(2)
0001b4 e040      	LDI  R20,LOW(0)
0001b5 e000      	LDI  R16,LOW(0)
0001b6 322d      	CPI  R18,45
0001b7 f411      	BRNE _0x2000021
0001b8 e001      	LDI  R16,LOW(1)
0001b9 c0fc      	RJMP _0x200001B
                 _0x2000021:
0001ba 322b      	CPI  R18,43
0001bb f411      	BRNE _0x2000022
0001bc e24b      	LDI  R20,LOW(43)
0001bd c0f8      	RJMP _0x200001B
                 _0x2000022:
0001be 3220      	CPI  R18,32
0001bf f411      	BRNE _0x2000023
0001c0 e240      	LDI  R20,LOW(32)
0001c1 c0f4      	RJMP _0x200001B
                 _0x2000023:
0001c2 c002      	RJMP _0x2000024
                 _0x200001F:
0001c3 30e2      	CPI  R30,LOW(0x2)
0001c4 f439      	BRNE _0x2000025
                 _0x2000024:
0001c5 e050      	LDI  R21,LOW(0)
0001c6 e013      	LDI  R17,LOW(3)
0001c7 3320      	CPI  R18,48
0001c8 f411      	BRNE _0x2000026
0001c9 6800      	ORI  R16,LOW(128)
0001ca c0eb      	RJMP _0x200001B
                 _0x2000026:
0001cb c003      	RJMP _0x2000027
                 _0x2000025:
0001cc 30e3      	CPI  R30,LOW(0x3)
0001cd f009      	BREQ PC+2
0001ce c0e7      	RJMP _0x200001B
                 _0x2000027:
0001cf 3320      	CPI  R18,48
0001d0 f010      	BRLO _0x200002A
0001d1 332a      	CPI  R18,58
0001d2 f008      	BRLO _0x200002B
                 _0x200002A:
0001d3 c007      	RJMP _0x2000029
                 _0x200002B:
0001d4 e0aa      	LDI  R26,LOW(10)
0001d5 9f5a      	MUL  R21,R26
0001d6 2d50      	MOV  R21,R0
0001d7 2fe2      	MOV  R30,R18
0001d8 53e0      	SUBI R30,LOW(48)
0001d9 0f5e      	ADD  R21,R30
0001da c0db      	RJMP _0x200001B
                 _0x2000029:
0001db 2fe2      	MOV  R30,R18
0001dc 36e3      	CPI  R30,LOW(0x63)
0001dd f449      	BRNE _0x200002F
0001de 940e 03a8 	CALL SUBOPT_0x2
0001e0 89e8      	LDD  R30,Y+16
0001e1 89f9      	LDD  R31,Y+16+1
0001e2 81a4      	LDD  R26,Z+4
0001e3 93aa      	ST   -Y,R26
0001e4 940e 03ae 	CALL SUBOPT_0x3
0001e6 c0ce      	RJMP _0x2000030
                 _0x200002F:
0001e7 37e3      	CPI  R30,LOW(0x73)
0001e8 f441      	BRNE _0x2000032
0001e9 940e 03a8 	CALL SUBOPT_0x2
0001eb 940e 03b4 	CALL SUBOPT_0x4
0001ed 940e 0383 	CALL _strlen
0001ef 2f1e      	MOV  R17,R30
0001f0 c00a      	RJMP _0x2000033
                 _0x2000032:
0001f1 37e0      	CPI  R30,LOW(0x70)
0001f2 f461      	BRNE _0x2000035
0001f3 940e 03a8 	CALL SUBOPT_0x2
0001f5 940e 03b4 	CALL SUBOPT_0x4
0001f7 940e 038f 	CALL _strlenf
0001f9 2f1e      	MOV  R17,R30
0001fa 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001fb 6002      	ORI  R16,LOW(2)
0001fc 770f      	ANDI R16,LOW(127)
0001fd e030      	LDI  R19,LOW(0)
0001fe c034      	RJMP _0x2000036
                 _0x2000035:
0001ff 36e4      	CPI  R30,LOW(0x64)
000200 f011      	BREQ _0x2000039
000201 36e9      	CPI  R30,LOW(0x69)
000202 f411      	BRNE _0x200003A
                 _0x2000039:
000203 6004      	ORI  R16,LOW(4)
000204 c002      	RJMP _0x200003B
                 _0x200003A:
000205 37e5      	CPI  R30,LOW(0x75)
000206 f431      	BRNE _0x200003C
                 _0x200003B:
000207 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000208 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000209 83ee      	STD  Y+6,R30
00020a 83ff      	STD  Y+6+1,R31
00020b e015      	LDI  R17,LOW(5)
00020c c00c      	RJMP _0x200003D
                 _0x200003C:
00020d 35e8      	CPI  R30,LOW(0x58)
00020e f411      	BRNE _0x200003F
00020f 6008      	ORI  R16,LOW(8)
000210 c003      	RJMP _0x2000040
                 _0x200003F:
000211 37e8      	CPI  R30,LOW(0x78)
000212 f009      	BREQ PC+2
000213 c0a1      	RJMP _0x2000071
                 _0x2000040:
000214 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000215 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000216 83ee      	STD  Y+6,R30
000217 83ff      	STD  Y+6+1,R31
000218 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000219 ff02      	SBRS R16,2
00021a c014      	RJMP _0x2000042
00021b 940e 03a8 	CALL SUBOPT_0x2
00021d 940e 03be 	CALL SUBOPT_0x5
00021f 85ab      	LDD  R26,Y+11
000220 23aa      	TST  R26
000221 f43a      	BRPL _0x2000043
000222 85ea      	LDD  R30,Y+10
000223 85fb      	LDD  R31,Y+10+1
000224 940e 03e9 	CALL __ANEGW1
000226 87ea      	STD  Y+10,R30
000227 87fb      	STD  Y+10+1,R31
000228 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000229 3040      	CPI  R20,0
00022a f011      	BREQ _0x2000044
00022b 5f1f      	SUBI R17,-LOW(1)
00022c c001      	RJMP _0x2000045
                 _0x2000044:
00022d 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
00022e c004      	RJMP _0x2000046
                 _0x2000042:
00022f 940e 03a8 	CALL SUBOPT_0x2
000231 940e 03be 	CALL SUBOPT_0x5
                 _0x2000046:
                 _0x2000036:
000233 fd00      	SBRC R16,0
000234 c011      	RJMP _0x2000047
                 _0x2000048:
000235 1715      	CP   R17,R21
000236 f478      	BRSH _0x200004A
000237 ff07      	SBRS R16,7
000238 c008      	RJMP _0x200004B
000239 ff02      	SBRS R16,2
00023a c004      	RJMP _0x200004C
00023b 7f0b      	ANDI R16,LOW(251)
00023c 2f24      	MOV  R18,R20
00023d 5011      	SUBI R17,LOW(1)
00023e c001      	RJMP _0x200004D
                 _0x200004C:
00023f e320      	LDI  R18,LOW(48)
                 _0x200004D:
000240 c001      	RJMP _0x200004E
                 _0x200004B:
000241 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000242 940e 03a1 	CALL SUBOPT_0x1
000244 5051      	SUBI R21,LOW(1)
000245 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000246 2f31      	MOV  R19,R17
000247 ff01      	SBRS R16,1
000248 c017      	RJMP _0x200004F
                 _0x2000050:
000249 3030      	CPI  R19,0
00024a f0a1      	BREQ _0x2000052
00024b ff03      	SBRS R16,3
00024c c006      	RJMP _0x2000053
00024d 81ee      	LDD  R30,Y+6
00024e 81ff      	LDD  R31,Y+6+1
00024f 9125      	LPM  R18,Z+
000250 83ee      	STD  Y+6,R30
000251 83ff      	STD  Y+6+1,R31
000252 c005      	RJMP _0x2000054
                 _0x2000053:
000253 81ae      	LDD  R26,Y+6
000254 81bf      	LDD  R27,Y+6+1
000255 912d      	LD   R18,X+
000256 83ae      	STD  Y+6,R26
000257 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000258 940e 03a1 	CALL SUBOPT_0x1
00025a 3050      	CPI  R21,0
00025b f009      	BREQ _0x2000055
00025c 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00025d 5031      	SUBI R19,LOW(1)
00025e cfea      	RJMP _0x2000050
                 _0x2000052:
00025f c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000260 e320      	LDI  R18,LOW(48)
000261 81ee      	LDD  R30,Y+6
000262 81ff      	LDD  R31,Y+6+1
000263 940e 0437 	CALL __GETW1PF
000265 87e8      	STD  Y+8,R30
000266 87f9      	STD  Y+8+1,R31
000267 81ee      	LDD  R30,Y+6
000268 81ff      	LDD  R31,Y+6+1
000269 9632      	ADIW R30,2
00026a 83ee      	STD  Y+6,R30
00026b 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00026c 85e8      	LDD  R30,Y+8
00026d 85f9      	LDD  R31,Y+8+1
00026e 85aa      	LDD  R26,Y+10
00026f 85bb      	LDD  R27,Y+10+1
000270 17ae      	CP   R26,R30
000271 07bf      	CPC  R27,R31
000272 f050      	BRLO _0x200005C
000273 5f2f      	SUBI R18,-LOW(1)
000274 85a8      	LDD  R26,Y+8
000275 85b9      	LDD  R27,Y+8+1
000276 85ea      	LDD  R30,Y+10
000277 85fb      	LDD  R31,Y+10+1
000278 1bea      	SUB  R30,R26
000279 0bfb      	SBC  R31,R27
00027a 87ea      	STD  Y+10,R30
00027b 87fb      	STD  Y+10+1,R31
00027c cfef      	RJMP _0x200005A
                 _0x200005C:
00027d 332a      	CPI  R18,58
00027e f028      	BRLO _0x200005D
00027f ff03      	SBRS R16,3
000280 c002      	RJMP _0x200005E
000281 5f29      	SUBI R18,-LOW(7)
000282 c001      	RJMP _0x200005F
                 _0x200005E:
000283 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000284 fd04      	SBRC R16,4
000285 c01a      	RJMP _0x2000061
000286 3321      	CPI  R18,49
000287 f420      	BRSH _0x2000063
000288 85a8      	LDD  R26,Y+8
000289 85b9      	LDD  R27,Y+8+1
00028a 9711      	SBIW R26,1
00028b f409      	BRNE _0x2000062
                 _0x2000063:
00028c c009      	RJMP _0x20000CD
                 _0x2000062:
00028d 1753      	CP   R21,R19
00028e f010      	BRLO _0x2000067
00028f ff00      	SBRS R16,0
000290 c001      	RJMP _0x2000068
                 _0x2000067:
000291 c013      	RJMP _0x2000066
                 _0x2000068:
000292 e220      	LDI  R18,LOW(32)
000293 ff07      	SBRS R16,7
000294 c00b      	RJMP _0x2000069
000295 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000296 6100      	ORI  R16,LOW(16)
000297 ff02      	SBRS R16,2
000298 c007      	RJMP _0x200006A
000299 7f0b      	ANDI R16,LOW(251)
00029a 934a      	ST   -Y,R20
00029b 940e 03ae 	CALL SUBOPT_0x3
00029d 3050      	CPI  R21,0
00029e f009      	BREQ _0x200006B
00029f 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002a0 940e 03a1 	CALL SUBOPT_0x1
0002a2 3050      	CPI  R21,0
0002a3 f009      	BREQ _0x200006C
0002a4 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002a5 5031      	SUBI R19,LOW(1)
0002a6 85a8      	LDD  R26,Y+8
0002a7 85b9      	LDD  R27,Y+8+1
0002a8 9712      	SBIW R26,2
0002a9 f008      	BRLO _0x2000059
0002aa cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002ab ff00      	SBRS R16,0
0002ac c008      	RJMP _0x200006D
                 _0x200006E:
0002ad 3050      	CPI  R21,0
0002ae f031      	BREQ _0x2000070
0002af 5051      	SUBI R21,LOW(1)
0002b0 e2e0      	LDI  R30,LOW(32)
0002b1 93ea      	ST   -Y,R30
0002b2 940e 03ae 	CALL SUBOPT_0x3
0002b4 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002b5 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002b6 cee0      	RJMP _0x2000016
                 _0x2000018:
0002b7 85ac      	LDD  R26,Y+12
0002b8 85bd      	LDD  R27,Y+12+1
0002b9 940e 0433 	CALL __GETW1P
0002bb 940e 0447 	CALL __LOADLOCR6
0002bd 9664      	ADIW R28,20
0002be 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002bf 92ff      	PUSH R15
0002c0 2ef8      	MOV  R15,R24
0002c1 9726      	SBIW R28,6
0002c2 940e 0442 	CALL __SAVELOCR4
0002c4 940e 03c6 	CALL SUBOPT_0x6
0002c6 9730      	SBIW R30,0
0002c7 f419      	BRNE _0x2000072
0002c8 efef      	LDI  R30,LOW(65535)
0002c9 efff      	LDI  R31,HIGH(65535)
0002ca c023      	RJMP _0x2080003
                 _0x2000072:
0002cb 01de      	MOVW R26,R28
0002cc 9616      	ADIW R26,6
0002cd 940e 03e5 	CALL __ADDW2R15
0002cf 018d      	MOVW R16,R26
0002d0 940e 03c6 	CALL SUBOPT_0x6
0002d2 83ee      	STD  Y+6,R30
0002d3 83ff      	STD  Y+6+1,R31
0002d4 e0e0      	LDI  R30,LOW(0)
0002d5 87e8      	STD  Y+8,R30
0002d6 87e9      	STD  Y+8+1,R30
0002d7 01de      	MOVW R26,R28
0002d8 961a      	ADIW R26,10
0002d9 940e 03e5 	CALL __ADDW2R15
0002db 940e 0433 	CALL __GETW1P
0002dd 93fa      	ST   -Y,R31
0002de 93ea      	ST   -Y,R30
0002df 931a      	ST   -Y,R17
0002e0 930a      	ST   -Y,R16
0002e1 e4eb      	LDI  R30,LOW(_put_buff_G100)
0002e2 e0f1      	LDI  R31,HIGH(_put_buff_G100)
0002e3 93fa      	ST   -Y,R31
0002e4 93ea      	ST   -Y,R30
0002e5 01de      	MOVW R26,R28
0002e6 961a      	ADIW R26,10
0002e7 dea3      	RCALL __print_G100
0002e8 019f      	MOVW R18,R30
0002e9 81ae      	LDD  R26,Y+6
0002ea 81bf      	LDD  R27,Y+6+1
0002eb e0e0      	LDI  R30,LOW(0)
0002ec 93ec      	ST   X,R30
0002ed 01f9      	MOVW R30,R18
                 _0x2080003:
0002ee 940e 0449 	CALL __LOADLOCR4
0002f0 962a      	ADIW R28,10
0002f1 90ff      	POP  R15
0002f2 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002f3 93aa      	ST   -Y,R26
0002f4 b3eb      	IN   R30,0x1B
0002f5 70ef      	ANDI R30,LOW(0xF)
0002f6 2fae      	MOV  R26,R30
0002f7 81e8      	LD   R30,Y
0002f8 7fe0      	ANDI R30,LOW(0xF0)
0002f9 2bea      	OR   R30,R26
0002fa bbeb      	OUT  0x1B,R30
                +
0002fb e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002fc 958a     +DEC R24
0002fd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002fe 9ada      	SBI  0x1B,2
                +
0002ff e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000300 958a     +DEC R24
000301 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000302 98da      	CBI  0x1B,2
                +
000303 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000304 958a     +DEC R24
000305 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000306 c07a      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000307 93aa      	ST   -Y,R26
000308 81a8      	LD   R26,Y
000309 dfe9      	RCALL __lcd_write_nibble_G101
00030a 81e8          ld    r30,y
00030b 95e2          swap  r30
00030c 83e8          st    y,r30
00030d 81a8      	LD   R26,Y
00030e dfe4      	RCALL __lcd_write_nibble_G101
                +
00030f e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000310 958a     +DEC R24
000311 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000312 c06e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000313 93aa      	ST   -Y,R26
000314 81e8      	LD   R30,Y
000315 e0f0      	LDI  R31,0
000316 5ae0      	SUBI R30,LOW(-__base_y_G101)
000317 4ffd      	SBCI R31,HIGH(-__base_y_G101)
000318 81e0      	LD   R30,Z
000319 81a9      	LDD  R26,Y+1
00031a 0fae      	ADD  R26,R30
00031b dfeb      	RCALL __lcd_write_data
00031c 80d9      	LDD  R13,Y+1
00031d 80c8      	LDD  R12,Y+0
                 _0x2080002:
00031e 9622      	ADIW R28,2
00031f 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000320 e0a2      	LDI  R26,LOW(2)
000321 940e 03cd 	CALL SUBOPT_0x7
000323 e0ac      	LDI  R26,LOW(12)
000324 dfe2      	RCALL __lcd_write_data
000325 e0a1      	LDI  R26,LOW(1)
000326 940e 03cd 	CALL SUBOPT_0x7
000328 e0e0      	LDI  R30,LOW(0)
000329 2ece      	MOV  R12,R30
00032a 2ede      	MOV  R13,R30
00032b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00032c 93aa      	ST   -Y,R26
00032d 81a8      	LD   R26,Y
00032e 30aa      	CPI  R26,LOW(0xA)
00032f f021      	BREQ _0x2020005
000330 91e0 0264 	LDS  R30,__lcd_maxx
000332 16de      	CP   R13,R30
000333 f048      	BRLO _0x2020004
                 _0x2020005:
000334 e0e0      	LDI  R30,LOW(0)
000335 93ea      	ST   -Y,R30
000336 94c3      	INC  R12
000337 2dac      	MOV  R26,R12
000338 dfda      	RCALL _lcd_gotoxy
000339 81a8      	LD   R26,Y
00033a 30aa      	CPI  R26,LOW(0xA)
00033b f409      	BRNE _0x2020007
00033c c044      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
00033d 94d3      	INC  R13
00033e 9ad8      	SBI  0x1B,0
00033f 81a8      	LD   R26,Y
000340 dfc6      	RCALL __lcd_write_data
000341 98d8      	CBI  0x1B,0
000342 c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000343 93ba      	ST   -Y,R27
000344 93aa      	ST   -Y,R26
000345 931a      	ST   -Y,R17
                 _0x2020008:
000346 81a9      	LDD  R26,Y+1
000347 81ba      	LDD  R27,Y+1+1
000348 91ed      	LD   R30,X+
000349 83a9      	STD  Y+1,R26
00034a 83ba      	STD  Y+1+1,R27
00034b 2f1e      	MOV  R17,R30
00034c 30e0      	CPI  R30,0
00034d f019      	BREQ _0x202000A
00034e 2fa1      	MOV  R26,R17
00034f dfdc      	RCALL _lcd_putchar
000350 cff5      	RJMP _0x2020008
                 _0x202000A:
000351 8118      	LDD  R17,Y+0
000352 9623      	ADIW R28,3
000353 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000354 93aa      	ST   -Y,R26
000355 b3ea      	IN   R30,0x1A
000356 6fe0      	ORI  R30,LOW(0xF0)
000357 bbea      	OUT  0x1A,R30
000358 9ad2      	SBI  0x1A,2
000359 9ad0      	SBI  0x1A,0
00035a 9ad1      	SBI  0x1A,1
00035b 98da      	CBI  0x1B,2
00035c 98d8      	CBI  0x1B,0
00035d 98d9      	CBI  0x1B,1
00035e 81e8      	LD   R30,Y
00035f 93e0 0264 	STS  __lcd_maxx,R30
000361 58e0      	SUBI R30,-LOW(128)
                +
000362 93e0 0262+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000364 81e8      	LD   R30,Y
000365 54e0      	SUBI R30,-LOW(192)
                +
000366 93e0 0263+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000368 e1a4      	LDI  R26,LOW(20)
000369 e0b0      	LDI  R27,0
00036a 940e 03db 	CALL _delay_ms
00036c 940e 03d3 	CALL SUBOPT_0x8
00036e 940e 03d3 	CALL SUBOPT_0x8
000370 940e 03d3 	CALL SUBOPT_0x8
000372 e2a0      	LDI  R26,LOW(32)
000373 df7f      	RCALL __lcd_write_nibble_G101
                +
000374 ec88     +LDI R24 , LOW ( 200 )
000375 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000376 9701     +SBIW R24 , 1
000377 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000378 e2a8      	LDI  R26,LOW(40)
000379 df8d      	RCALL __lcd_write_data
00037a e0a4      	LDI  R26,LOW(4)
00037b df8b      	RCALL __lcd_write_data
00037c e8a5      	LDI  R26,LOW(133)
00037d df89      	RCALL __lcd_write_data
00037e e0a6      	LDI  R26,LOW(6)
00037f df87      	RCALL __lcd_write_data
000380 df9f      	RCALL _lcd_clear
                 _0x2080001:
000381 9621      	ADIW R28,1
000382 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000383 93ba      	ST   -Y,R27
000384 93aa      	ST   -Y,R26
000385 91a9          ld   r26,y+
000386 91b9          ld   r27,y+
000387 27ee          clr  r30
000388 27ff          clr  r31
                 strlen0:
000389 916d          ld   r22,x+
00038a 2366          tst  r22
00038b f011          breq strlen1
00038c 9631          adiw r30,1
00038d cffb          rjmp strlen0
                 strlen1:
00038e 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00038f 93ba      	ST   -Y,R27
000390 93aa      	ST   -Y,R26
000391 27aa          clr  r26
000392 27bb          clr  r27
000393 91e9          ld   r30,y+
000394 91f9          ld   r31,y+
                 strlenf0:
000395 9005      	lpm  r0,z+
000396 2000          tst  r0
000397 f011          breq strlenf1
000398 9611          adiw r26,1
000399 cffb          rjmp strlenf0
                 strlenf1:
00039a 01fd          movw r30,r26
00039b 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G101:
000260           	.BYTE 0x4
                 __lcd_maxx:
000264           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
00039c 940e 03ed 	CALL __CWD1
00039e 940e 043b 	CALL __PUTPARD1
0003a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
0003a1 932a      	ST   -Y,R18
0003a2 85ad      	LDD  R26,Y+13
0003a3 85be      	LDD  R27,Y+13+1
0003a4 85ef      	LDD  R30,Y+15
0003a5 89f8      	LDD  R31,Y+15+1
0003a6 9509      	ICALL
0003a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0003a8 89e8      	LDD  R30,Y+16
0003a9 89f9      	LDD  R31,Y+16+1
0003aa 9734      	SBIW R30,4
0003ab 8be8      	STD  Y+16,R30
0003ac 8bf9      	STD  Y+16+1,R31
0003ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0003ae 85ad      	LDD  R26,Y+13
0003af 85be      	LDD  R27,Y+13+1
0003b0 85ef      	LDD  R30,Y+15
0003b1 89f8      	LDD  R31,Y+15+1
0003b2 9509      	ICALL
0003b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0003b4 89a8      	LDD  R26,Y+16
0003b5 89b9      	LDD  R27,Y+16+1
0003b6 9614      	ADIW R26,4
0003b7 940e 0433 	CALL __GETW1P
0003b9 83ee      	STD  Y+6,R30
0003ba 83ff      	STD  Y+6+1,R31
0003bb 81ae      	LDD  R26,Y+6
0003bc 81bf      	LDD  R27,Y+6+1
0003bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0003be 89a8      	LDD  R26,Y+16
0003bf 89b9      	LDD  R27,Y+16+1
0003c0 9614      	ADIW R26,4
0003c1 940e 0433 	CALL __GETW1P
0003c3 87ea      	STD  Y+10,R30
0003c4 87fb      	STD  Y+10+1,R31
0003c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0003c6 01de      	MOVW R26,R28
0003c7 961c      	ADIW R26,12
0003c8 940e 03e5 	CALL __ADDW2R15
0003ca 940e 0433 	CALL __GETW1P
0003cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003cd 940e 0307 	CALL __lcd_write_data
0003cf e0a3      	LDI  R26,LOW(3)
0003d0 e0b0      	LDI  R27,0
0003d1 940c 03db 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0003d3 e3a0      	LDI  R26,LOW(48)
0003d4 940e 02f3 	CALL __lcd_write_nibble_G101
                +
0003d6 ec88     +LDI R24 , LOW ( 200 )
0003d7 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003d8 9701     +SBIW R24 , 1
0003d9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003da 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003db 9610      	adiw r26,0
0003dc f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003dd ed80     +LDI R24 , LOW ( 0x7D0 )
0003de e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003df 9701     +SBIW R24 , 1
0003e0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003e1 95a8      	wdr
0003e2 9711      	sbiw r26,1
0003e3 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003e4 9508      	ret
                 
                 __ADDW2R15:
0003e5 2400      	CLR  R0
0003e6 0daf      	ADD  R26,R15
0003e7 1db0      	ADC  R27,R0
0003e8 9508      	RET
                 
                 __ANEGW1:
0003e9 95f1      	NEG  R31
0003ea 95e1      	NEG  R30
0003eb 40f0      	SBCI R31,0
0003ec 9508      	RET
                 
                 __CWD1:
0003ed 2f6f      	MOV  R22,R31
0003ee 0f66      	ADD  R22,R22
0003ef 0b66      	SBC  R22,R22
0003f0 2f76      	MOV  R23,R22
0003f1 9508      	RET
                 
                 __MULW12U:
0003f2 9ffa      	MUL  R31,R26
0003f3 2df0      	MOV  R31,R0
0003f4 9feb      	MUL  R30,R27
0003f5 0df0      	ADD  R31,R0
0003f6 9fea      	MUL  R30,R26
0003f7 2de0      	MOV  R30,R0
0003f8 0df1      	ADD  R31,R1
0003f9 9508      	RET
                 
                 __MULW12:
0003fa d02a      	RCALL __CHKSIGNW
0003fb dff6      	RCALL __MULW12U
0003fc f40e      	BRTC __MULW121
0003fd dfeb      	RCALL __ANEGW1
                 __MULW121:
0003fe 9508      	RET
                 
                 __DIVW21U:
0003ff 2400      	CLR  R0
000400 2411      	CLR  R1
000401 e190      	LDI  R25,16
                 __DIVW21U1:
000402 0faa      	LSL  R26
000403 1fbb      	ROL  R27
000404 1c00      	ROL  R0
000405 1c11      	ROL  R1
000406 1a0e      	SUB  R0,R30
000407 0a1f      	SBC  R1,R31
000408 f418      	BRCC __DIVW21U2
000409 0e0e      	ADD  R0,R30
00040a 1e1f      	ADC  R1,R31
00040b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00040c 60a1      	SBR  R26,1
                 __DIVW21U3:
00040d 959a      	DEC  R25
00040e f799      	BRNE __DIVW21U1
00040f 01fd      	MOVW R30,R26
000410 01d0      	MOVW R26,R0
000411 9508      	RET
                 
                 __DIVW21:
000412 d012      	RCALL __CHKSIGNW
000413 dfeb      	RCALL __DIVW21U
000414 f40e      	BRTC __DIVW211
000415 dfd3      	RCALL __ANEGW1
                 __DIVW211:
000416 9508      	RET
                 
                 __MODW21:
000417 94e8      	CLT
000418 ffb7      	SBRS R27,7
000419 c004      	RJMP __MODW211
00041a 95a0      	COM  R26
00041b 95b0      	COM  R27
00041c 9611      	ADIW R26,1
00041d 9468      	SET
                 __MODW211:
00041e fdf7      	SBRC R31,7
00041f dfc9      	RCALL __ANEGW1
000420 dfde      	RCALL __DIVW21U
000421 01fd      	MOVW R30,R26
000422 f40e      	BRTC __MODW212
000423 dfc5      	RCALL __ANEGW1
                 __MODW212:
000424 9508      	RET
                 
                 __CHKSIGNW:
000425 94e8      	CLT
000426 fff7      	SBRS R31,7
000427 c002      	RJMP __CHKSW1
000428 dfc0      	RCALL __ANEGW1
000429 9468      	SET
                 __CHKSW1:
00042a ffb7      	SBRS R27,7
00042b c006      	RJMP __CHKSW2
00042c 95a0      	COM  R26
00042d 95b0      	COM  R27
00042e 9611      	ADIW R26,1
00042f f800      	BLD  R0,0
000430 9403      	INC  R0
000431 fa00      	BST  R0,0
                 __CHKSW2:
000432 9508      	RET
                 
                 __GETW1P:
000433 91ed      	LD   R30,X+
000434 91fc      	LD   R31,X
000435 9711      	SBIW R26,1
000436 9508      	RET
                 
                 __GETW1PF:
000437 9005      	LPM  R0,Z+
000438 91f4      	LPM  R31,Z
000439 2de0      	MOV  R30,R0
00043a 9508      	RET
                 
                 __PUTPARD1:
00043b 937a      	ST   -Y,R23
00043c 936a      	ST   -Y,R22
00043d 93fa      	ST   -Y,R31
00043e 93ea      	ST   -Y,R30
00043f 9508      	RET
                 
                 __SAVELOCR6:
000440 935a      	ST   -Y,R21
                 __SAVELOCR5:
000441 934a      	ST   -Y,R20
                 __SAVELOCR4:
000442 933a      	ST   -Y,R19
                 __SAVELOCR3:
000443 932a      	ST   -Y,R18
                 __SAVELOCR2:
000444 931a      	ST   -Y,R17
000445 930a      	ST   -Y,R16
000446 9508      	RET
                 
                 __LOADLOCR6:
000447 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000448 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000449 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00044a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00044b 8119      	LDD  R17,Y+1
00044c 8108      	LD   R16,Y
00044d 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00044e 0fac      	ADD  R26,R28
00044f 1fbd      	ADC  R27,R29
                 __INITLOC0:
000450 9005      	LPM  R0,Z+
000451 920d      	ST   X+,R0
000452 958a      	DEC  R24
000453 f7e1      	BRNE __INITLOC0
000454 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  26 r1 :   8 r2 :   0 r3 :   0 r4 :   5 r5 :   1 r6 :   4 r7 :   0 
r8 :   2 r9 :   0 r10:   1 r11:   0 r12:   4 r13:   4 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  26 r25:   9 r26: 129 r27:  55 r28:  22 r29:   2 r30: 218 r31:  80 
x  :  24 y  : 198 z  :  16 
Registers used: 29 out of 35 (82.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   8 
adiw  :  32 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  33 brpl  :   1 brsh  :   2 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  67 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   4 cpc   :   2 cpi   :  33 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   3 jmp   :  25 ld    :  35 ldd   :  80 ldi   : 120 
lds   :   1 lpm   :  15 lsl   :   1 lsr   :   0 mov   :  21 movw  :  33 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   9 out   :  25 pop   :   1 push  :   1 rcall :  28 ret   :  34 
reti  :   1 rjmp  :  64 rol   :   3 ror   :   0 sbc   :   3 sbci  :   3 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  23 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  79 std   :  31 sts   :   3 sub   :   2 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008aa   2108    110   2218   32768   6.8%
[.dseg] 0x000060 0x000265      0      5      5    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
